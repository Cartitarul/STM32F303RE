
BlinkLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd0  08004cd0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004cd0  08004cd0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cd0  08004cd0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd0  08004cd0  00014cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00001050  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001060  20001060  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f474  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000029e3  00000000  00000000  0002f4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c58  00000000  00000000  00031ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000096b  00000000  00000000  00032b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020d57  00000000  00000000  000334a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001187c  00000000  00000000  000541fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c7ebc  00000000  00000000  00065a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003080  00000000  00000000  0012d934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001309b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c24 	.word	0x08004c24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004c24 	.word	0x08004c24

080001e0 <RTE_Task_1ms>:
// RTE Real Time Enviornment
#include "RTE.h"
#include "main.h"
#include "cmsis_os.h"

void RTE_Task_1ms(){
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
    
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr

080001ee <RTE_Task_5ms>:

void RTE_Task_5ms(){
 80001ee:	b480      	push	{r7}
 80001f0:	af00      	add	r7, sp, #0
    
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <RTE_Task_10ms>:

void RTE_Task_10ms(){
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0

}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr

0800020a <RTE_Task_100ms>:

void RTE_Task_100ms(){
 800020a:	b480      	push	{r7}
 800020c:	af00      	add	r7, sp, #0
    
}
 800020e:	bf00      	nop
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <RTE_Task_500ms>:

void RTE_Task_500ms(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
    
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr

08000226 <RTE_Task_1000ms>:

void RTE_Task_1000ms(){
 8000226:	b580      	push	{r7, lr}
 8000228:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800022a:	2120      	movs	r1, #32
 800022c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000230:	f000 fe28 	bl	8000e84 <HAL_GPIO_TogglePin>
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}

08000238 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	60f8      	str	r0, [r7, #12]
 8000240:	60b9      	str	r1, [r7, #8]
 8000242:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	4a07      	ldr	r2, [pc, #28]	; (8000264 <vApplicationGetIdleTaskMemory+0x2c>)
 8000248:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <vApplicationGetIdleTaskMemory+0x30>)
 800024e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2280      	movs	r2, #128	; 0x80
 8000254:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000256:	bf00      	nop
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	2000002c 	.word	0x2000002c
 8000268:	20000080 	.word	0x20000080

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b5b0      	push	{r4, r5, r7, lr}
 800026e:	b08e      	sub	sp, #56	; 0x38
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 fa77 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f8c9 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f831 	bl	80002e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800027e:	f000 f895 	bl	80003ac <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000282:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <main+0x64>)
 8000284:	f107 041c 	add.w	r4, r7, #28
 8000288:	461d      	mov	r5, r3
 800028a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f003 fa59 	bl	8003754 <osThreadCreate>
 80002a2:	4603      	mov	r3, r0
 80002a4:	4a0b      	ldr	r2, [pc, #44]	; (80002d4 <main+0x68>)
 80002a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0x6c>)
 80002aa:	463c      	mov	r4, r7
 80002ac:	461d      	mov	r5, r3
 80002ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80002ba:	463b      	mov	r3, r7
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f003 fa48 	bl	8003754 <osThreadCreate>
 80002c4:	4603      	mov	r3, r0
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <main+0x70>)
 80002c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002ca:	f003 fa3c 	bl	8003746 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ce:	e7fe      	b.n	80002ce <main+0x62>
 80002d0:	08004c48 	.word	0x08004c48
 80002d4:	20000308 	.word	0x20000308
 80002d8:	08004c70 	.word	0x08004c70
 80002dc:	2000030c 	.word	0x2000030c

080002e0 <MX_GPIO_Init>:
  /* USER CODE END 3 */
}


static void MX_GPIO_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b08a      	sub	sp, #40	; 0x28
 80002e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f6:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <MX_GPIO_Init+0xc4>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a2a      	ldr	r2, [pc, #168]	; (80003a4 <MX_GPIO_Init+0xc4>)
 80002fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <MX_GPIO_Init+0xc4>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800030a:	613b      	str	r3, [r7, #16]
 800030c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800030e:	4b25      	ldr	r3, [pc, #148]	; (80003a4 <MX_GPIO_Init+0xc4>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a24      	ldr	r2, [pc, #144]	; (80003a4 <MX_GPIO_Init+0xc4>)
 8000314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <MX_GPIO_Init+0xc4>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <MX_GPIO_Init+0xc4>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	4a1e      	ldr	r2, [pc, #120]	; (80003a4 <MX_GPIO_Init+0xc4>)
 800032c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000330:	6153      	str	r3, [r2, #20]
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <MX_GPIO_Init+0xc4>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800033a:	60bb      	str	r3, [r7, #8]
 800033c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800033e:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_GPIO_Init+0xc4>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	4a18      	ldr	r2, [pc, #96]	; (80003a4 <MX_GPIO_Init+0xc4>)
 8000344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000348:	6153      	str	r3, [r2, #20]
 800034a:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_GPIO_Init+0xc4>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2120      	movs	r1, #32
 800035a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035e:	f000 fd79 	bl	8000e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000368:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800036c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	4619      	mov	r1, r3
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <MX_GPIO_Init+0xc8>)
 800037a:	f000 fbe1 	bl	8000b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800037e:	2320      	movs	r3, #32
 8000380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000382:	2301      	movs	r3, #1
 8000384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	2300      	movs	r3, #0
 800038c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800038e:	f107 0314 	add.w	r3, r7, #20
 8000392:	4619      	mov	r1, r3
 8000394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000398:	f000 fbd2 	bl	8000b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800039c:	bf00      	nop
 800039e:	3728      	adds	r7, #40	; 0x28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	48000800 	.word	0x48000800

080003ac <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003b2:	4a15      	ldr	r2, [pc, #84]	; (8000408 <MX_USART2_UART_Init+0x5c>)
 80003b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80003b6:	4b13      	ldr	r3, [pc, #76]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003d2:	220c      	movs	r2, #12
 80003d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_USART2_UART_Init+0x58>)
 80003f0:	f002 fa0a 	bl	8002808 <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003fa:	f000 f8d1 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000280 	.word	0x20000280
 8000408:	40004400 	.word	0x40004400

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b0a6      	sub	sp, #152	; 0x98
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000416:	2228      	movs	r2, #40	; 0x28
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f004 fbd6 	bl	8004bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2258      	movs	r2, #88	; 0x58
 8000434:	2100      	movs	r1, #0
 8000436:	4618      	mov	r0, r3
 8000438:	f004 fbc8 	bl	8004bcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043c:	2302      	movs	r3, #2
 800043e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000440:	2301      	movs	r3, #1
 8000442:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000444:	2310      	movs	r3, #16
 8000446:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044a:	2302      	movs	r3, #2
 800044c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000458:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800045c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000466:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800046a:	4618      	mov	r0, r3
 800046c:	f000 fd24 	bl	8000eb8 <HAL_RCC_OscConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000476:	f000 f893 	bl	80005a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047a:	230f      	movs	r3, #15
 800047c:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047e:	2302      	movs	r3, #2
 8000480:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000490:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000494:	2102      	movs	r1, #2
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fd62 	bl	8001f60 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004a2:	f000 f87d 	bl	80005a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004a6:	2302      	movs	r3, #2
 80004a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	4618      	mov	r0, r3
 80004b2:	f001 ff8b 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004bc:	f000 f870 	bl	80005a0 <Error_Handler>
  }
}
 80004c0:	bf00      	nop
 80004c2:	3798      	adds	r7, #152	; 0x98
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	//  HAL_UART_Transmit(&huart2, rx_data, 6, 10);
	//  HAL_Delay(1000);
    osDelay(1);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f003 f98b 	bl	80037ec <osDelay>
 80004d6:	e7fb      	b.n	80004d0 <StartDefaultTask+0x8>

080004d8 <StartTask02>:
* @param argument: Not used
* @resval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
  int counter=0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  counter++;
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3301      	adds	r3, #1
 80004e8:	60fb      	str	r3, [r7, #12]
  RTE_Task_1ms();
 80004ea:	f7ff fe79 	bl	80001e0 <RTE_Task_1ms>
  if(counter%5==0)
 80004ee:	68f9      	ldr	r1, [r7, #12]
 80004f0:	4b28      	ldr	r3, [pc, #160]	; (8000594 <StartTask02+0xbc>)
 80004f2:	fb83 2301 	smull	r2, r3, r3, r1
 80004f6:	105a      	asrs	r2, r3, #1
 80004f8:	17cb      	asrs	r3, r1, #31
 80004fa:	1ad2      	subs	r2, r2, r3
 80004fc:	4613      	mov	r3, r2
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	4413      	add	r3, r2
 8000502:	1aca      	subs	r2, r1, r3
 8000504:	2a00      	cmp	r2, #0
 8000506:	d101      	bne.n	800050c <StartTask02+0x34>
    RTE_Task_5ms();
 8000508:	f7ff fe71 	bl	80001ee <RTE_Task_5ms>
  if(counter%10==0)
 800050c:	68f9      	ldr	r1, [r7, #12]
 800050e:	4b21      	ldr	r3, [pc, #132]	; (8000594 <StartTask02+0xbc>)
 8000510:	fb83 2301 	smull	r2, r3, r3, r1
 8000514:	109a      	asrs	r2, r3, #2
 8000516:	17cb      	asrs	r3, r1, #31
 8000518:	1ad2      	subs	r2, r2, r3
 800051a:	4613      	mov	r3, r2
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	4413      	add	r3, r2
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	1aca      	subs	r2, r1, r3
 8000524:	2a00      	cmp	r2, #0
 8000526:	d101      	bne.n	800052c <StartTask02+0x54>
    RTE_Task_10ms();
 8000528:	f7ff fe68 	bl	80001fc <RTE_Task_10ms>
  if(counter%100==0)
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <StartTask02+0xc0>)
 8000530:	fb83 1302 	smull	r1, r3, r3, r2
 8000534:	1159      	asrs	r1, r3, #5
 8000536:	17d3      	asrs	r3, r2, #31
 8000538:	1acb      	subs	r3, r1, r3
 800053a:	2164      	movs	r1, #100	; 0x64
 800053c:	fb01 f303 	mul.w	r3, r1, r3
 8000540:	1ad3      	subs	r3, r2, r3
 8000542:	2b00      	cmp	r3, #0
 8000544:	d101      	bne.n	800054a <StartTask02+0x72>
    RTE_Task_100ms();
 8000546:	f7ff fe60 	bl	800020a <RTE_Task_100ms>
  if(counter%500==0)
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <StartTask02+0xc4>)
 800054e:	fb83 1302 	smull	r1, r3, r3, r2
 8000552:	1159      	asrs	r1, r3, #5
 8000554:	17d3      	asrs	r3, r2, #31
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800055c:	fb01 f303 	mul.w	r3, r1, r3
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d101      	bne.n	800056a <StartTask02+0x92>
    RTE_Task_500ms();
 8000566:	f7ff fe57 	bl	8000218 <RTE_Task_500ms>
  if(counter%1000==0){
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <StartTask02+0xc4>)
 800056e:	fb83 1302 	smull	r1, r3, r3, r2
 8000572:	1199      	asrs	r1, r3, #6
 8000574:	17d3      	asrs	r3, r2, #31
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800057c:	fb01 f303 	mul.w	r3, r1, r3
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d101      	bne.n	800058a <StartTask02+0xb2>
	RTE_Task_1000ms();
 8000586:	f7ff fe4e 	bl	8000226 <RTE_Task_1000ms>
  }
  osDelay(1);
 800058a:	2001      	movs	r0, #1
 800058c:	f003 f92e 	bl	80037ec <osDelay>
  {
 8000590:	e7a6      	b.n	80004e0 <StartTask02+0x8>
 8000592:	bf00      	nop
 8000594:	66666667 	.word	0x66666667
 8000598:	51eb851f 	.word	0x51eb851f
 800059c:	10624dd3 	.word	0x10624dd3

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <Error_Handler+0x8>
	...

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_MspInit+0x4c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <HAL_MspInit+0x4c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_MspInit+0x4c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_MspInit+0x4c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <HAL_MspInit+0x4c>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <HAL_MspInit+0x4c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	210f      	movs	r1, #15
 80005e6:	f06f 0001 	mvn.w	r0, #1
 80005ea:	f000 f9fc 	bl	80009e6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	; 0x28
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <HAL_UART_MspInit+0x8c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d130      	bne.n	8000680 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800061e:	4b1b      	ldr	r3, [pc, #108]	; (800068c <HAL_UART_MspInit+0x90>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a1a      	ldr	r2, [pc, #104]	; (800068c <HAL_UART_MspInit+0x90>)
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <HAL_UART_MspInit+0x90>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_UART_MspInit+0x90>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <HAL_UART_MspInit+0x90>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_UART_MspInit+0x90>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800064e:	230c      	movs	r3, #12
 8000650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	2302      	movs	r3, #2
 8000654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2300      	movs	r3, #0
 800065c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800065e:	2307      	movs	r3, #7
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f000 fa68 	bl	8000b40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2105      	movs	r1, #5
 8000674:	2026      	movs	r0, #38	; 0x26
 8000676:	f000 f9b6 	bl	80009e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800067a:	2026      	movs	r0, #38	; 0x26
 800067c:	f000 f9cf 	bl	8000a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40004400 	.word	0x40004400
 800068c:	40021000 	.word	0x40021000

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <NMI_Handler+0x4>

08000696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <MemManage_Handler+0x4>

080006a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <BusFault_Handler+0x4>

080006a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <UsageFault_Handler+0x4>

080006ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f896 	bl	80007f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80006c4:	f003 fe18 	bl	80042f8 <xTaskGetSchedulerState>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d001      	beq.n	80006d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80006ce:	f004 f853 	bl	8004778 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006dc:	4802      	ldr	r0, [pc, #8]	; (80006e8 <USART2_IRQHandler+0x10>)
 80006de:	f002 f8e1 	bl	80028a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000280 	.word	0x20000280

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000748 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff ffea 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f004 fa4d 	bl	8004bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000742:	f7ff fd93 	bl	800026c <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000748:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000754:	08004cd8 	.word	0x08004cd8
  ldr r2, =_sbss
 8000758:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800075c:	20001060 	.word	0x20001060

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <HAL_Init+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	; (800078c <HAL_Init+0x28>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 f92b 	bl	80009d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	200f      	movs	r0, #15
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff ff14 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f943 	bl	8000a3a <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 f90b 	bl	80009e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_IncTick+0x20>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_IncTick+0x24>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <HAL_IncTick+0x24>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000008 	.word	0x20000008
 8000814:	20000310 	.word	0x20000310

08000818 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;  
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <HAL_GetTick+0x14>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000310 	.word	0x20000310

08000830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	60d3      	str	r3, [r2, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_GetPriorityGrouping+0x18>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	f003 0307 	and.w	r3, r3, #7
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	db0b      	blt.n	80008be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 021f 	and.w	r2, r3, #31
 80008ac:	4907      	ldr	r1, [pc, #28]	; (80008cc <__NVIC_EnableIRQ+0x38>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	095b      	lsrs	r3, r3, #5
 80008b4:	2001      	movs	r0, #1
 80008b6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000924:	b480      	push	{r7}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	f1c3 0307 	rsb	r3, r3, #7
 800093e:	2b04      	cmp	r3, #4
 8000940:	bf28      	it	cs
 8000942:	2304      	movcs	r3, #4
 8000944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3304      	adds	r3, #4
 800094a:	2b06      	cmp	r3, #6
 800094c:	d902      	bls.n	8000954 <NVIC_EncodePriority+0x30>
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3b03      	subs	r3, #3
 8000952:	e000      	b.n	8000956 <NVIC_EncodePriority+0x32>
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	f04f 32ff 	mov.w	r2, #4294967295
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800096c:	f04f 31ff 	mov.w	r1, #4294967295
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa01 f303 	lsl.w	r3, r1, r3
 8000976:	43d9      	mvns	r1, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800097c:	4313      	orrs	r3, r2
         );
}
 800097e:	4618      	mov	r0, r3
 8000980:	3724      	adds	r7, #36	; 0x24
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
	...

0800098c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3b01      	subs	r3, #1
 8000998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800099c:	d301      	bcc.n	80009a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800099e:	2301      	movs	r3, #1
 80009a0:	e00f      	b.n	80009c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <SysTick_Config+0x40>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009aa:	210f      	movs	r1, #15
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f7ff ff8e 	bl	80008d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SysTick_Config+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SysTick_Config+0x40>)
 80009bc:	2207      	movs	r2, #7
 80009be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	e000e010 	.word	0xe000e010

080009d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ff29 	bl	8000830 <__NVIC_SetPriorityGrouping>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	4603      	mov	r3, r0
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
 80009f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff3e 	bl	8000878 <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff8e 	bl	8000924 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5d 	bl	80008d0 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff31 	bl	8000894 <__NVIC_EnableIRQ>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ffa2 	bl	800098c <SysTick_Config>
 8000a48:	4603      	mov	r3, r0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d008      	beq.n	8000a76 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2204      	movs	r2, #4
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e020      	b.n	8000ab8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f022 020e 	bic.w	r2, r2, #14
 8000a84:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f022 0201 	bic.w	r2, r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d005      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2204      	movs	r2, #4
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e027      	b.n	8000b36 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 020e 	bic.w	r2, r2, #14
 8000af4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b0e:	2101      	movs	r1, #1
 8000b10:	fa01 f202 	lsl.w	r2, r1, r2
 8000b14:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	4798      	blx	r3
    } 
  }
  return status;
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4e:	e160      	b.n	8000e12 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	2101      	movs	r1, #1
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 8152 	beq.w	8000e0c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d005      	beq.n	8000b80 <HAL_GPIO_Init+0x40>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d130      	bne.n	8000be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	091b      	lsrs	r3, r3, #4
 8000bcc:	f003 0201 	and.w	r2, r3, #1
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d017      	beq.n	8000c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4013      	ands	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d123      	bne.n	8000c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3208      	adds	r2, #8
 8000c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	220f      	movs	r2, #15
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	f003 0307 	and.w	r3, r3, #7
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	08da      	lsrs	r2, r3, #3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3208      	adds	r2, #8
 8000c6c:	6939      	ldr	r1, [r7, #16]
 8000c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0203 	and.w	r2, r3, #3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 80ac 	beq.w	8000e0c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb4:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a5d      	ldr	r2, [pc, #372]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HAL_GPIO_Init+0x2f0>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ccc:	4a59      	ldr	r2, [pc, #356]	; (8000e34 <HAL_GPIO_Init+0x2f4>)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cf6:	d025      	beq.n	8000d44 <HAL_GPIO_Init+0x204>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4f      	ldr	r2, [pc, #316]	; (8000e38 <HAL_GPIO_Init+0x2f8>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d01f      	beq.n	8000d40 <HAL_GPIO_Init+0x200>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a4e      	ldr	r2, [pc, #312]	; (8000e3c <HAL_GPIO_Init+0x2fc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d019      	beq.n	8000d3c <HAL_GPIO_Init+0x1fc>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a4d      	ldr	r2, [pc, #308]	; (8000e40 <HAL_GPIO_Init+0x300>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d013      	beq.n	8000d38 <HAL_GPIO_Init+0x1f8>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a4c      	ldr	r2, [pc, #304]	; (8000e44 <HAL_GPIO_Init+0x304>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d00d      	beq.n	8000d34 <HAL_GPIO_Init+0x1f4>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a4b      	ldr	r2, [pc, #300]	; (8000e48 <HAL_GPIO_Init+0x308>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d007      	beq.n	8000d30 <HAL_GPIO_Init+0x1f0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a4a      	ldr	r2, [pc, #296]	; (8000e4c <HAL_GPIO_Init+0x30c>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d101      	bne.n	8000d2c <HAL_GPIO_Init+0x1ec>
 8000d28:	2306      	movs	r3, #6
 8000d2a:	e00c      	b.n	8000d46 <HAL_GPIO_Init+0x206>
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	e00a      	b.n	8000d46 <HAL_GPIO_Init+0x206>
 8000d30:	2305      	movs	r3, #5
 8000d32:	e008      	b.n	8000d46 <HAL_GPIO_Init+0x206>
 8000d34:	2304      	movs	r3, #4
 8000d36:	e006      	b.n	8000d46 <HAL_GPIO_Init+0x206>
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e004      	b.n	8000d46 <HAL_GPIO_Init+0x206>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e002      	b.n	8000d46 <HAL_GPIO_Init+0x206>
 8000d40:	2301      	movs	r3, #1
 8000d42:	e000      	b.n	8000d46 <HAL_GPIO_Init+0x206>
 8000d44:	2300      	movs	r3, #0
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	f002 0203 	and.w	r2, r2, #3
 8000d4c:	0092      	lsls	r2, r2, #2
 8000d4e:	4093      	lsls	r3, r2
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d56:	4937      	ldr	r1, [pc, #220]	; (8000e34 <HAL_GPIO_Init+0x2f4>)
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d64:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <HAL_GPIO_Init+0x310>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d88:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <HAL_GPIO_Init+0x310>)
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_GPIO_Init+0x310>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db2:	4a27      	ldr	r2, [pc, #156]	; (8000e50 <HAL_GPIO_Init+0x310>)
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000db8:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <HAL_GPIO_Init+0x310>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ddc:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <HAL_GPIO_Init+0x310>)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_GPIO_Init+0x310>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_GPIO_Init+0x310>)
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f47f ae97 	bne.w	8000b50 <HAL_GPIO_Init+0x10>
  }
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	371c      	adds	r7, #28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010000 	.word	0x40010000
 8000e38:	48000400 	.word	0x48000400
 8000e3c:	48000800 	.word	0x48000800
 8000e40:	48000c00 	.word	0x48000c00
 8000e44:	48001000 	.word	0x48001000
 8000e48:	48001400 	.word	0x48001400
 8000e4c:	48001800 	.word	0x48001800
 8000e50:	40010400 	.word	0x40010400

08000e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e70:	e002      	b.n	8000e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695b      	ldr	r3, [r3, #20]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	041a      	lsls	r2, r3, #16
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	43d9      	mvns	r1, r3
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	400b      	ands	r3, r1
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ec4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ec8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ece:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f001 b83a 	b.w	8001f52 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ee2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 816f 	beq.w	80011d2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ef4:	4bb5      	ldr	r3, [pc, #724]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b04      	cmp	r3, #4
 8000efe:	d00c      	beq.n	8000f1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f00:	4bb2      	ldr	r3, [pc, #712]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d15c      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x10e>
 8000f0c:	4baf      	ldr	r3, [pc, #700]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f18:	d155      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x10e>
 8000f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f2e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f32:	fab3 f383 	clz	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	095b      	lsrs	r3, r3, #5
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d102      	bne.n	8000f4c <HAL_RCC_OscConfig+0x94>
 8000f46:	4ba1      	ldr	r3, [pc, #644]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	e015      	b.n	8000f78 <HAL_RCC_OscConfig+0xc0>
 8000f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f50:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f54:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f68:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f74:	4b95      	ldr	r3, [pc, #596]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f7c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f80:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f84:	fa92 f2a2 	rbit	r2, r2
 8000f88:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000f8c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	f042 0220 	orr.w	r2, r2, #32
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	f002 021f 	and.w	r2, r2, #31
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8111 	beq.w	80011d0 <HAL_RCC_OscConfig+0x318>
 8000fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fb2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f040 8108 	bne.w	80011d0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f000 bfc6 	b.w	8001f52 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd6:	d106      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x12e>
 8000fd8:	4b7c      	ldr	r3, [pc, #496]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a7b      	ldr	r2, [pc, #492]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8000fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e036      	b.n	8001054 <HAL_RCC_OscConfig+0x19c>
 8000fe6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x158>
 8000ff6:	4b75      	ldr	r3, [pc, #468]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a74      	ldr	r2, [pc, #464]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8000ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b72      	ldr	r3, [pc, #456]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a71      	ldr	r2, [pc, #452]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8001008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e021      	b.n	8001054 <HAL_RCC_OscConfig+0x19c>
 8001010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001014:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x184>
 8001022:	4b6a      	ldr	r3, [pc, #424]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a69      	ldr	r2, [pc, #420]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b67      	ldr	r3, [pc, #412]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a66      	ldr	r2, [pc, #408]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e00b      	b.n	8001054 <HAL_RCC_OscConfig+0x19c>
 800103c:	4b63      	ldr	r3, [pc, #396]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a62      	ldr	r2, [pc, #392]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8001042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b60      	ldr	r3, [pc, #384]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a5f      	ldr	r2, [pc, #380]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 800104e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001052:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001058:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d059      	beq.n	8001118 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fbd8 	bl	8000818 <HAL_GetTick>
 8001068:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106c:	e00a      	b.n	8001084 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800106e:	f7ff fbd3 	bl	8000818 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d902      	bls.n	8001084 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	f000 bf67 	b.w	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001084:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001088:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001098:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109c:	fab3 f383 	clz	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d102      	bne.n	80010b6 <HAL_RCC_OscConfig+0x1fe>
 80010b0:	4b46      	ldr	r3, [pc, #280]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	e015      	b.n	80010e2 <HAL_RCC_OscConfig+0x22a>
 80010b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80010d6:	fa93 f3a3 	rbit	r3, r3
 80010da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010e6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80010ea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80010ee:	fa92 f2a2 	rbit	r2, r2
 80010f2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80010f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010fa:	fab2 f282 	clz	r2, r2
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	f042 0220 	orr.w	r2, r2, #32
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	f002 021f 	and.w	r2, r2, #31
 800110a:	2101      	movs	r1, #1
 800110c:	fa01 f202 	lsl.w	r2, r1, r2
 8001110:	4013      	ands	r3, r2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0ab      	beq.n	800106e <HAL_RCC_OscConfig+0x1b6>
 8001116:	e05c      	b.n	80011d2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fb7e 	bl	8000818 <HAL_GetTick>
 800111c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001120:	e00a      	b.n	8001138 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001122:	f7ff fb79 	bl	8000818 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	; 0x64
 8001130:	d902      	bls.n	8001138 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	f000 bf0d 	b.w	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001138:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001140:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001144:	fa93 f3a3 	rbit	r3, r3
 8001148:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800114c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <HAL_RCC_OscConfig+0x2b2>
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	e015      	b.n	8001196 <HAL_RCC_OscConfig+0x2de>
 800116a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800117e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001182:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001186:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_RCC_OscConfig+0x314>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800119a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800119e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011a2:	fa92 f2a2 	rbit	r2, r2
 80011a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80011aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011ae:	fab2 f282 	clz	r2, r2
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	f042 0220 	orr.w	r2, r2, #32
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	f002 021f 	and.w	r2, r2, #31
 80011be:	2101      	movs	r1, #1
 80011c0:	fa01 f202 	lsl.w	r2, r1, r2
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1ab      	bne.n	8001122 <HAL_RCC_OscConfig+0x26a>
 80011ca:	e002      	b.n	80011d2 <HAL_RCC_OscConfig+0x31a>
 80011cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 817f 	beq.w	80014e6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011e8:	4ba7      	ldr	r3, [pc, #668]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00c      	beq.n	800120e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011f4:	4ba4      	ldr	r3, [pc, #656]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d173      	bne.n	80012e8 <HAL_RCC_OscConfig+0x430>
 8001200:	4ba1      	ldr	r3, [pc, #644]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800120c:	d16c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x430>
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001220:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d102      	bne.n	800123e <HAL_RCC_OscConfig+0x386>
 8001238:	4b93      	ldr	r3, [pc, #588]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	e013      	b.n	8001266 <HAL_RCC_OscConfig+0x3ae>
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001244:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001256:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001262:	4b89      	ldr	r3, [pc, #548]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	2202      	movs	r2, #2
 8001268:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800126c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001270:	fa92 f2a2 	rbit	r2, r2
 8001274:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001278:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800127c:	fab2 f282 	clz	r2, r2
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f042 0220 	orr.w	r2, r2, #32
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	f002 021f 	and.w	r2, r2, #31
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00a      	beq.n	80012ae <HAL_RCC_OscConfig+0x3f6>
 8001298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800129c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d002      	beq.n	80012ae <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	f000 be52 	b.w	8001f52 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	21f8      	movs	r1, #248	; 0xf8
 80012c4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80012cc:	fa91 f1a1 	rbit	r1, r1
 80012d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80012d4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012d8:	fab1 f181 	clz	r1, r1
 80012dc:	b2c9      	uxtb	r1, r1
 80012de:	408b      	lsls	r3, r1
 80012e0:	4969      	ldr	r1, [pc, #420]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e0fe      	b.n	80014e6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 8088 	beq.w	800140a <HAL_RCC_OscConfig+0x552>
 80012fa:	2301      	movs	r3, #1
 80012fc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001300:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001304:	fa93 f3a3 	rbit	r3, r3
 8001308:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800130c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800131a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	461a      	mov	r2, r3
 8001322:	2301      	movs	r3, #1
 8001324:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fa77 	bl	8000818 <HAL_GetTick>
 800132a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	e00a      	b.n	8001346 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001330:	f7ff fa72 	bl	8000818 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d902      	bls.n	8001346 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	f000 be06 	b.w	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001350:	fa93 f3a3 	rbit	r3, r3
 8001354:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001358:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	fab3 f383 	clz	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d102      	bne.n	8001376 <HAL_RCC_OscConfig+0x4be>
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	e013      	b.n	800139e <HAL_RCC_OscConfig+0x4e6>
 8001376:	2302      	movs	r3, #2
 8001378:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001380:	fa93 f3a3 	rbit	r3, r3
 8001384:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800138e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	2202      	movs	r2, #2
 80013a0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013a4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013a8:	fa92 f2a2 	rbit	r2, r2
 80013ac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80013b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013b4:	fab2 f282 	clz	r2, r2
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	f042 0220 	orr.w	r2, r2, #32
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	f002 021f 	and.w	r2, r2, #31
 80013c4:	2101      	movs	r1, #1
 80013c6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0af      	beq.n	8001330 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	21f8      	movs	r1, #248	; 0xf8
 80013e6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80013ee:	fa91 f1a1 	rbit	r1, r1
 80013f2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80013f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013fa:	fab1 f181 	clz	r1, r1
 80013fe:	b2c9      	uxtb	r1, r1
 8001400:	408b      	lsls	r3, r1
 8001402:	4921      	ldr	r1, [pc, #132]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e06d      	b.n	80014e6 <HAL_RCC_OscConfig+0x62e>
 800140a:	2301      	movs	r3, #1
 800140c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001414:	fa93 f3a3 	rbit	r3, r3
 8001418:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800141c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001420:	fab3 f383 	clz	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800142a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	461a      	mov	r2, r3
 8001432:	2300      	movs	r3, #0
 8001434:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff f9ef 	bl	8000818 <HAL_GetTick>
 800143a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	e00a      	b.n	8001456 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff f9ea 	bl	8000818 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d902      	bls.n	8001456 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	f000 bd7e 	b.w	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001468:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_RCC_OscConfig+0x5d4>
 8001480:	4b01      	ldr	r3, [pc, #4]	; (8001488 <HAL_RCC_OscConfig+0x5d0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	e016      	b.n	80014b4 <HAL_RCC_OscConfig+0x5fc>
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001492:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014a8:	fa93 f3a3 	rbit	r3, r3
 80014ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014b0:	4bbf      	ldr	r3, [pc, #764]	; (80017b0 <HAL_RCC_OscConfig+0x8f8>)
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	2202      	movs	r2, #2
 80014b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014be:	fa92 f2a2 	rbit	r2, r2
 80014c2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80014c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014ca:	fab2 f282 	clz	r2, r2
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	f042 0220 	orr.w	r2, r2, #32
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	f002 021f 	and.w	r2, r2, #31
 80014da:	2101      	movs	r1, #1
 80014dc:	fa01 f202 	lsl.w	r2, r1, r2
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1ac      	bne.n	8001440 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8113 	beq.w	8001722 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001500:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d07c      	beq.n	8001606 <HAL_RCC_OscConfig+0x74e>
 800150c:	2301      	movs	r3, #1
 800150e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800151e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	4ba2      	ldr	r3, [pc, #648]	; (80017b4 <HAL_RCC_OscConfig+0x8fc>)
 800152c:	4413      	add	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	461a      	mov	r2, r3
 8001532:	2301      	movs	r3, #1
 8001534:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7ff f96f 	bl	8000818 <HAL_GetTick>
 800153a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001540:	f7ff f96a 	bl	8000818 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d902      	bls.n	8001556 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	f000 bcfe 	b.w	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001560:	fa93 f2a3 	rbit	r2, r3
 8001564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001568:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001576:	2202      	movs	r2, #2
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001596:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800159a:	2202      	movs	r2, #2
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fa93 f2a3 	rbit	r2, r3
 80015ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b7e      	ldr	r3, [pc, #504]	; (80017b0 <HAL_RCC_OscConfig+0x8f8>)
 80015b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015c2:	2102      	movs	r1, #2
 80015c4:	6019      	str	r1, [r3, #0]
 80015c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fa93 f1a3 	rbit	r1, r3
 80015d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015dc:	6019      	str	r1, [r3, #0]
  return result;
 80015de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	f003 031f 	and.w	r3, r3, #31
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d09d      	beq.n	8001540 <HAL_RCC_OscConfig+0x688>
 8001604:	e08d      	b.n	8001722 <HAL_RCC_OscConfig+0x86a>
 8001606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800160a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001616:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fa93 f2a3 	rbit	r2, r3
 8001620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001624:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001628:	601a      	str	r2, [r3, #0]
  return result;
 800162a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001632:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	461a      	mov	r2, r3
 800163c:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <HAL_RCC_OscConfig+0x8fc>)
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	461a      	mov	r2, r3
 8001644:	2300      	movs	r3, #0
 8001646:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff f8e6 	bl	8000818 <HAL_GetTick>
 800164c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff f8e1 	bl	8000818 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d902      	bls.n	8001668 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	f000 bc75 	b.w	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800166c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001670:	2202      	movs	r2, #2
 8001672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001678:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	fa93 f2a3 	rbit	r2, r3
 8001682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001686:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001690:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001694:	2202      	movs	r2, #2
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016b8:	2202      	movs	r2, #2
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fa93 f2a3 	rbit	r2, r3
 80016ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <HAL_RCC_OscConfig+0x8f8>)
 80016d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016dc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016e0:	2102      	movs	r1, #2
 80016e2:	6019      	str	r1, [r3, #0]
 80016e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	fa93 f1a3 	rbit	r1, r3
 80016f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016fa:	6019      	str	r1, [r3, #0]
  return result;
 80016fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001700:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fab3 f383 	clz	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d197      	bne.n	8001652 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001726:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 81a5 	beq.w	8001a82 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <HAL_RCC_OscConfig+0x8f8>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d116      	bne.n	8001778 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_RCC_OscConfig+0x8f8>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_RCC_OscConfig+0x8f8>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_RCC_OscConfig+0x8f8>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800175e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001762:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001770:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001772:	2301      	movs	r3, #1
 8001774:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_RCC_OscConfig+0x900>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d121      	bne.n	80017c8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_RCC_OscConfig+0x900>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HAL_RCC_OscConfig+0x900>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001790:	f7ff f842 	bl	8000818 <HAL_GetTick>
 8001794:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	e010      	b.n	80017bc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff f83d 	bl	8000818 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d908      	bls.n	80017bc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e3d1      	b.n	8001f52 <HAL_RCC_OscConfig+0x109a>
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	10908120 	.word	0x10908120
 80017b8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	4b8d      	ldr	r3, [pc, #564]	; (80019f4 <HAL_RCC_OscConfig+0xb3c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0e8      	beq.n	800179a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x92e>
 80017d8:	4b87      	ldr	r3, [pc, #540]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a86      	ldr	r2, [pc, #536]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e035      	b.n	8001852 <HAL_RCC_OscConfig+0x99a>
 80017e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x958>
 80017f6:	4b80      	ldr	r3, [pc, #512]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a7f      	ldr	r2, [pc, #508]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	4b7d      	ldr	r3, [pc, #500]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a7c      	ldr	r2, [pc, #496]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	e020      	b.n	8001852 <HAL_RCC_OscConfig+0x99a>
 8001810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001814:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d10c      	bne.n	800183a <HAL_RCC_OscConfig+0x982>
 8001820:	4b75      	ldr	r3, [pc, #468]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4a74      	ldr	r2, [pc, #464]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	4b72      	ldr	r3, [pc, #456]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a71      	ldr	r2, [pc, #452]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	e00b      	b.n	8001852 <HAL_RCC_OscConfig+0x99a>
 800183a:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6213      	str	r3, [r2, #32]
 8001846:	4b6c      	ldr	r3, [pc, #432]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a6b      	ldr	r2, [pc, #428]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001856:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8081 	beq.w	8001966 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7fe ffd8 	bl	8000818 <HAL_GetTick>
 8001868:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7fe ffd3 	bl	8000818 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e365      	b.n	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800188e:	2202      	movs	r2, #2
 8001890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001896:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018b2:	2202      	movs	r2, #2
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ba:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018cc:	601a      	str	r2, [r3, #0]
  return result;
 80018ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d102      	bne.n	80018f2 <HAL_RCC_OscConfig+0xa3a>
 80018ec:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	e013      	b.n	800191a <HAL_RCC_OscConfig+0xa62>
 80018f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018fa:	2202      	movs	r2, #2
 80018fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001902:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	fa93 f2a3 	rbit	r2, r3
 800190c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001910:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800191e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001922:	2102      	movs	r1, #2
 8001924:	6011      	str	r1, [r2, #0]
 8001926:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800192a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	fa92 f1a2 	rbit	r1, r2
 8001934:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001938:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800193c:	6011      	str	r1, [r2, #0]
  return result;
 800193e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001942:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	fab2 f282 	clz	r2, r2
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f002 021f 	and.w	r2, r2, #31
 8001958:	2101      	movs	r1, #1
 800195a:	fa01 f202 	lsl.w	r2, r1, r2
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d084      	beq.n	800186e <HAL_RCC_OscConfig+0x9b6>
 8001964:	e083      	b.n	8001a6e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7fe ff57 	bl	8000818 <HAL_GetTick>
 800196a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7fe ff52 	bl	8000818 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e2e4      	b.n	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001990:	2202      	movs	r2, #2
 8001992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	fa93 f2a3 	rbit	r2, r3
 80019a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019b4:	2202      	movs	r2, #2
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019bc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019ce:	601a      	str	r2, [r3, #0]
  return result;
 80019d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0xb44>
 80019ee:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_RCC_OscConfig+0xb40>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	e017      	b.n	8001a24 <HAL_RCC_OscConfig+0xb6c>
 80019f4:	40007000 	.word	0x40007000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a04:	2202      	movs	r2, #2
 8001a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	4bb3      	ldr	r3, [pc, #716]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a2c:	2102      	movs	r1, #2
 8001a2e:	6011      	str	r1, [r2, #0]
 8001a30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a34:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	fa92 f1a2 	rbit	r1, r2
 8001a3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a42:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a46:	6011      	str	r1, [r2, #0]
  return result;
 8001a48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a4c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	fab2 f282 	clz	r2, r2
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	f002 021f 	and.w	r2, r2, #31
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d180      	bne.n	8001970 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a6e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d105      	bne.n	8001a82 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a76:	4b9e      	ldr	r3, [pc, #632]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a9d      	ldr	r2, [pc, #628]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a80:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 825e 	beq.w	8001f50 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a94:	4b96      	ldr	r3, [pc, #600]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	f000 821f 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	f040 8170 	bne.w	8001d94 <HAL_RCC_OscConfig+0xedc>
 8001ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	fa93 f2a3 	rbit	r2, r3
 8001ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ad8:	601a      	str	r2, [r3, #0]
  return result;
 8001ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ade:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ae2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	461a      	mov	r2, r3
 8001af6:	2300      	movs	r3, #0
 8001af8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7fe fe8d 	bl	8000818 <HAL_GetTick>
 8001afe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b02:	e009      	b.n	8001b18 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7fe fe88 	bl	8000818 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e21c      	b.n	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b3c:	601a      	str	r2, [r3, #0]
  return result;
 8001b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b42:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_OscConfig+0xcaa>
 8001b5c:	4b64      	ldr	r3, [pc, #400]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	e027      	b.n	8001bb2 <HAL_RCC_OscConfig+0xcfa>
 8001b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b74:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	fa93 f2a3 	rbit	r2, r3
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bb6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bbe:	6011      	str	r1, [r2, #0]
 8001bc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bc4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fa92 f1a2 	rbit	r1, r2
 8001bce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bd2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001bd6:	6011      	str	r1, [r2, #0]
  return result;
 8001bd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bdc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	fab2 f282 	clz	r2, r2
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f042 0220 	orr.w	r2, r2, #32
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f002 021f 	and.w	r2, r2, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d182      	bne.n	8001b04 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	f023 020f 	bic.w	r2, r3, #15
 8001c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	4937      	ldr	r1, [pc, #220]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6a19      	ldr	r1, [r3, #32]
 8001c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	492d      	ldr	r1, [pc, #180]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c44:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	fa93 f2a3 	rbit	r2, r3
 8001c5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c60:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c64:	601a      	str	r2, [r3, #0]
  return result;
 8001c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c6e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	461a      	mov	r2, r3
 8001c82:	2301      	movs	r3, #1
 8001c84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe fdc7 	bl	8000818 <HAL_GetTick>
 8001c8a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8e:	e009      	b.n	8001ca4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c90:	f7fe fdc2 	bl	8000818 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e156      	b.n	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cc8:	601a      	str	r2, [r3, #0]
  return result;
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xe3c>
 8001ce8:	4b01      	ldr	r3, [pc, #4]	; (8001cf0 <HAL_RCC_OscConfig+0xe38>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	e02a      	b.n	8001d44 <HAL_RCC_OscConfig+0xe8c>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d06:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	fa93 f2a3 	rbit	r2, r3
 8001d10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d14:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fa93 f2a3 	rbit	r2, r3
 8001d36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	4b86      	ldr	r3, [pc, #536]	; (8001f5c <HAL_RCC_OscConfig+0x10a4>)
 8001d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d44:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d48:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d50:	6011      	str	r1, [r2, #0]
 8001d52:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d56:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	fa92 f1a2 	rbit	r1, r2
 8001d60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d64:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d68:	6011      	str	r1, [r2, #0]
  return result;
 8001d6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d6e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	fab2 f282 	clz	r2, r2
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	f042 0220 	orr.w	r2, r2, #32
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	f002 021f 	and.w	r2, r2, #31
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f43f af7f 	beq.w	8001c90 <HAL_RCC_OscConfig+0xdd8>
 8001d92:	e0dd      	b.n	8001f50 <HAL_RCC_OscConfig+0x1098>
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	fa93 f2a3 	rbit	r2, r3
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001db8:	601a      	str	r2, [r3, #0]
  return result;
 8001dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dc2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe fd1d 	bl	8000818 <HAL_GetTick>
 8001dde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de2:	e009      	b.n	8001df8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de4:	f7fe fd18 	bl	8000818 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0ac      	b.n	8001f52 <HAL_RCC_OscConfig+0x109a>
 8001df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f2a3 	rbit	r2, r3
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e1c:	601a      	str	r2, [r3, #0]
  return result;
 8001e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e22:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <HAL_RCC_OscConfig+0xf8a>
 8001e3c:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <HAL_RCC_OscConfig+0x10a4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	e027      	b.n	8001e92 <HAL_RCC_OscConfig+0xfda>
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e62:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e88:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <HAL_RCC_OscConfig+0x10a4>)
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e96:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e9a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e9e:	6011      	str	r1, [r2, #0]
 8001ea0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ea4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	fa92 f1a2 	rbit	r1, r2
 8001eae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001eb6:	6011      	str	r1, [r2, #0]
  return result;
 8001eb8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ebc:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	fab2 f282 	clz	r2, r2
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f042 0220 	orr.w	r2, r2, #32
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f002 021f 	and.w	r2, r2, #31
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d182      	bne.n	8001de4 <HAL_RCC_OscConfig+0xf2c>
 8001ede:	e037      	b.n	8001f50 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e02e      	b.n	8001f52 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <HAL_RCC_OscConfig+0x10a4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001efc:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_RCC_OscConfig+0x10a4>)
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f08:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d117      	bne.n	8001f4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f20:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d10b      	bne.n	8001f4c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f38:	f003 020f 	and.w	r2, r3, #15
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000

08001f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b09e      	sub	sp, #120	; 0x78
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e162      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b90      	ldr	r3, [pc, #576]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b8d      	ldr	r3, [pc, #564]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	498b      	ldr	r1, [pc, #556]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e14a      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	497f      	ldr	r1, [pc, #508]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80dc 	beq.w	800218c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d13c      	bne.n	8002056 <HAL_RCC_ClockConfig+0xf6>
 8001fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f043 0301 	orr.w	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d102      	bne.n	8002006 <HAL_RCC_ClockConfig+0xa6>
 8002000:	4b6f      	ldr	r3, [pc, #444]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	e00f      	b.n	8002026 <HAL_RCC_ClockConfig+0xc6>
 8002006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	667b      	str	r3, [r7, #100]	; 0x64
 8002014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002018:	663b      	str	r3, [r7, #96]	; 0x60
 800201a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800202a:	65ba      	str	r2, [r7, #88]	; 0x58
 800202c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800202e:	fa92 f2a2 	rbit	r2, r2
 8002032:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002034:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002036:	fab2 f282 	clz	r2, r2
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	f042 0220 	orr.w	r2, r2, #32
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	f002 021f 	and.w	r2, r2, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f202 	lsl.w	r2, r1, r2
 800204c:	4013      	ands	r3, r2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d17b      	bne.n	800214a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0f3      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d13c      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x178>
 800205e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002062:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800206c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d102      	bne.n	8002088 <HAL_RCC_ClockConfig+0x128>
 8002082:	4b4f      	ldr	r3, [pc, #316]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	e00f      	b.n	80020a8 <HAL_RCC_ClockConfig+0x148>
 8002088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	647b      	str	r3, [r7, #68]	; 0x44
 8002096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800209a:	643b      	str	r3, [r7, #64]	; 0x40
 800209c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a4:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80020ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020b0:	fa92 f2a2 	rbit	r2, r2
 80020b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f002 021f 	and.w	r2, r2, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f202 	lsl.w	r2, r1, r2
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d13a      	bne.n	800214a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0b2      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
 80020d8:	2302      	movs	r3, #2
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_ClockConfig+0x1a0>
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e00d      	b.n	800211c <HAL_RCC_ClockConfig+0x1bc>
 8002100:	2302      	movs	r3, #2
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002106:	fa93 f3a3 	rbit	r3, r3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	2302      	movs	r3, #2
 800210e:	623b      	str	r3, [r7, #32]
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	2202      	movs	r2, #2
 800211e:	61ba      	str	r2, [r7, #24]
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	fa92 f2a2 	rbit	r2, r2
 8002126:	617a      	str	r2, [r7, #20]
  return result;
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	fab2 f282 	clz	r2, r2
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f042 0220 	orr.w	r2, r2, #32
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f002 021f 	and.w	r2, r2, #31
 800213a:	2101      	movs	r1, #1
 800213c:	fa01 f202 	lsl.w	r2, r1, r2
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e079      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f023 0203 	bic.w	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	491a      	ldr	r1, [pc, #104]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800215c:	f7fe fb5c 	bl	8000818 <HAL_GetTick>
 8002160:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7fe fb58 	bl	8000818 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e061      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_RCC_ClockConfig+0x260>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 020c 	and.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	429a      	cmp	r2, r3
 800218a:	d1eb      	bne.n	8002164 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d214      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	4906      	ldr	r1, [pc, #24]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021aa:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_RCC_ClockConfig+0x25c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e040      	b.n	800223e <HAL_RCC_ClockConfig+0x2de>
 80021bc:	40022000 	.word	0x40022000
 80021c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	491a      	ldr	r1, [pc, #104]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4912      	ldr	r1, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002202:	f000 f829 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002206:	4601      	mov	r1, r0
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_RCC_ClockConfig+0x2e8>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002210:	22f0      	movs	r2, #240	; 0xf0
 8002212:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	fa92 f2a2 	rbit	r2, r2
 800221a:	60fa      	str	r2, [r7, #12]
  return result;
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	fab2 f282 	clz	r2, r2
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	40d3      	lsrs	r3, r2
 8002226:	4a09      	ldr	r2, [pc, #36]	; (800224c <HAL_RCC_ClockConfig+0x2ec>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	fa21 f303 	lsr.w	r3, r1, r3
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_RCC_ClockConfig+0x2f0>)
 8002230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_RCC_ClockConfig+0x2f4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe faaa 	bl	8000790 <HAL_InitTick>
  
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3778      	adds	r7, #120	; 0x78
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	08004c98 	.word	0x08004c98
 8002250:	20000000 	.word	0x20000000
 8002254:	20000004 	.word	0x20000004

08002258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b08b      	sub	sp, #44	; 0x2c
 800225c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002272:	4b2a      	ldr	r3, [pc, #168]	; (800231c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x30>
 8002282:	2b08      	cmp	r3, #8
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x36>
 8002286:	e03f      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002288:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_RCC_GetSysClockFreq+0xc8>)
 800228a:	623b      	str	r3, [r7, #32]
      break;
 800228c:	e03f      	b.n	800230e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002294:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002298:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	fa92 f2a2 	rbit	r2, r2
 80022a0:	607a      	str	r2, [r7, #4]
  return result;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	fab2 f282 	clz	r2, r2
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	40d3      	lsrs	r3, r2
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_RCC_GetSysClockFreq+0xc4>)
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	220f      	movs	r2, #15
 80022bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	fa92 f2a2 	rbit	r2, r2
 80022c4:	60fa      	str	r2, [r7, #12]
  return result;
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	fab2 f282 	clz	r2, r2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	40d3      	lsrs	r3, r2
 80022d0:	4a15      	ldr	r2, [pc, #84]	; (8002328 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022e0:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
 80022f0:	e007      	b.n	8002302 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	623b      	str	r3, [r7, #32]
      break;
 8002306:	e002      	b.n	800230e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetSysClockFreq+0xc8>)
 800230a:	623b      	str	r3, [r7, #32]
      break;
 800230c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800230e:	6a3b      	ldr	r3, [r7, #32]
}
 8002310:	4618      	mov	r0, r3
 8002312:	372c      	adds	r7, #44	; 0x2c
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	40021000 	.word	0x40021000
 8002320:	007a1200 	.word	0x007a1200
 8002324:	08004cb0 	.word	0x08004cb0
 8002328:	08004cc0 	.word	0x08004cc0

0800232c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_RCC_GetHCLKFreq+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000000 	.word	0x20000000

08002344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800234a:	f7ff ffef 	bl	800232c <HAL_RCC_GetHCLKFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002358:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800235c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	fa92 f2a2 	rbit	r2, r2
 8002364:	603a      	str	r2, [r7, #0]
  return result;
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	fab2 f282 	clz	r2, r2
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	40d3      	lsrs	r3, r2
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	08004ca8 	.word	0x08004ca8

08002388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800238e:	f7ff ffcd 	bl	800232c <HAL_RCC_GetHCLKFreq>
 8002392:	4601      	mov	r1, r0
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800239c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	fa92 f2a2 	rbit	r2, r2
 80023a8:	603a      	str	r2, [r7, #0]
  return result;
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	fab2 f282 	clz	r2, r2
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	40d3      	lsrs	r3, r2
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80023b6:	5cd3      	ldrb	r3, [r2, r3]
 80023b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	08004ca8 	.word	0x08004ca8

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b092      	sub	sp, #72	; 0x48
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80d4 	beq.w	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f0:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10e      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fc:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	4a4a      	ldr	r2, [pc, #296]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002406:	61d3      	str	r3, [r2, #28]
 8002408:	4b48      	ldr	r3, [pc, #288]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002414:	2301      	movs	r3, #1
 8002416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b42      	ldr	r3, [pc, #264]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a41      	ldr	r2, [pc, #260]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7fe f9f1 	bl	8000818 <HAL_GetTick>
 8002436:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe f9ed 	bl	8000818 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b64      	cmp	r3, #100	; 0x64
 8002446:	d901      	bls.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e1d6      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b38      	ldr	r3, [pc, #224]	; (8002530 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002458:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002460:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 8084 	beq.w	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002474:	429a      	cmp	r2, r3
 8002476:	d07c      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	461a      	mov	r2, r3
 80024a2:	2301      	movs	r3, #1
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	461a      	mov	r2, r3
 80024c6:	2300      	movs	r3, #0
 80024c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024ca:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d04b      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe f99d 	bl	8000818 <HAL_GetTick>
 80024de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e0:	e00a      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fe f999 	bl	8000818 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e180      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80024f8:	2302      	movs	r3, #2
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
 8002504:	2302      	movs	r3, #2
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	61fb      	str	r3, [r7, #28]
  return result;
 8002510:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	b2db      	uxtb	r3, r3
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d108      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002526:	4b01      	ldr	r3, [pc, #4]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	e00d      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	10908100 	.word	0x10908100
 8002538:	2302      	movs	r3, #2
 800253a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa93 f3a3 	rbit	r3, r3
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	4b9a      	ldr	r3, [pc, #616]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	2202      	movs	r2, #2
 800254a:	613a      	str	r2, [r7, #16]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	fa92 f2a2 	rbit	r2, r2
 8002552:	60fa      	str	r2, [r7, #12]
  return result;
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	fab2 f282 	clz	r2, r2
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	f002 021f 	and.w	r2, r2, #31
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0b7      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002572:	4b8f      	ldr	r3, [pc, #572]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	498c      	ldr	r1, [pc, #560]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002584:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258c:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	4a87      	ldr	r2, [pc, #540]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002596:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025a4:	4b82      	ldr	r3, [pc, #520]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	f023 0203 	bic.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	497f      	ldr	r1, [pc, #508]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d008      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c2:	4b7b      	ldr	r3, [pc, #492]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4978      	ldr	r1, [pc, #480]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025e0:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4970      	ldr	r1, [pc, #448]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fe:	4b6c      	ldr	r3, [pc, #432]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f023 0210 	bic.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4969      	ldr	r1, [pc, #420]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800261c:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	4961      	ldr	r1, [pc, #388]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800263a:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f023 0220 	bic.w	r2, r3, #32
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	495a      	ldr	r1, [pc, #360]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002658:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	4952      	ldr	r1, [pc, #328]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002666:	4313      	orrs	r3, r2
 8002668:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002676:	4b4e      	ldr	r3, [pc, #312]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	494b      	ldr	r1, [pc, #300]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	4943      	ldr	r1, [pc, #268]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d008      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	493c      	ldr	r1, [pc, #240]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	4934      	ldr	r1, [pc, #208]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d008      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	492d      	ldr	r1, [pc, #180]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800270c:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	4925      	ldr	r1, [pc, #148]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800272a:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	491e      	ldr	r1, [pc, #120]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002738:	4313      	orrs	r3, r2
 800273a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	4916      	ldr	r1, [pc, #88]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002756:	4313      	orrs	r3, r2
 8002758:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	490f      	ldr	r1, [pc, #60]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00c      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80027a2:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	e002      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b6:	4913      	ldr	r1, [pc, #76]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	490b      	ldr	r1, [pc, #44]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f2:	4904      	ldr	r1, [pc, #16]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3748      	adds	r7, #72	; 0x48
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e040      	b.n	800289c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fd fee6 	bl	80005fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2224      	movs	r2, #36	; 0x24
 8002834:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0201 	bic.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fb32 	bl	8002eb0 <UART_SetConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e022      	b.n	800289c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fcfa 	bl	8003258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fd81 	bl	800339c <UART_CheckIdleState>
 800289a:	4603      	mov	r3, r0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b0ba      	sub	sp, #232	; 0xe8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80028ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80028d2:	4013      	ands	r3, r2
 80028d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80028d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d115      	bne.n	800290c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00f      	beq.n	800290c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d009      	beq.n	800290c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 82ab 	beq.w	8002e58 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	4798      	blx	r3
      }
      return;
 800290a:	e2a5      	b.n	8002e58 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800290c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 8117 	beq.w	8002b44 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002922:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002926:	4b85      	ldr	r3, [pc, #532]	; (8002b3c <HAL_UART_IRQHandler+0x298>)
 8002928:	4013      	ands	r3, r2
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 810a 	beq.w	8002b44 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d011      	beq.n	8002960 <HAL_UART_IRQHandler+0xbc>
 800293c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2201      	movs	r2, #1
 800294e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d011      	beq.n	8002990 <HAL_UART_IRQHandler+0xec>
 800296c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2202      	movs	r2, #2
 800297e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002986:	f043 0204 	orr.w	r2, r3, #4
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d011      	beq.n	80029c0 <HAL_UART_IRQHandler+0x11c>
 800299c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2204      	movs	r2, #4
 80029ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d105      	bne.n	80029e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00b      	beq.n	80029fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2208      	movs	r2, #8
 80029ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	f043 0208 	orr.w	r2, r3, #8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d012      	beq.n	8002a2e <HAL_UART_IRQHandler+0x18a>
 8002a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00c      	beq.n	8002a2e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8211 	beq.w	8002e5c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00d      	beq.n	8002a62 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d005      	beq.n	8002a86 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d04f      	beq.n	8002b26 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fd97 	bl	80035ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d141      	bne.n	8002b1e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aa8:	e853 3f00 	ldrex	r3, [r3]
 8002aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ac6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ace:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ad2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1d9      	bne.n	8002a9a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d013      	beq.n	8002b16 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	4a13      	ldr	r2, [pc, #76]	; (8002b40 <HAL_UART_IRQHandler+0x29c>)
 8002af4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd ffe2 	bl	8000ac4 <HAL_DMA_Abort_IT>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d017      	beq.n	8002b36 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b10:	4610      	mov	r0, r2
 8002b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b14:	e00f      	b.n	8002b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f9b4 	bl	8002e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1c:	e00b      	b.n	8002b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f9b0 	bl	8002e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	e007      	b.n	8002b36 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f9ac 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002b34:	e192      	b.n	8002e5c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b36:	bf00      	nop
    return;
 8002b38:	e190      	b.n	8002e5c <HAL_UART_IRQHandler+0x5b8>
 8002b3a:	bf00      	nop
 8002b3c:	04000120 	.word	0x04000120
 8002b40:	08003683 	.word	0x08003683

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	f040 814b 	bne.w	8002de4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8144 	beq.w	8002de4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 813d 	beq.w	8002de4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2210      	movs	r2, #16
 8002b70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	f040 80b5 	bne.w	8002cec <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b8e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8164 	beq.w	8002e60 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	f080 815c 	bcs.w	8002e60 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	f000 8086 	beq.w	8002cca <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002be8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bf8:	e841 2300 	strex	r3, r2, [r1]
 8002bfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1da      	bne.n	8002bbe <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3308      	adds	r3, #8
 8002c28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c38:	e841 2300 	strex	r3, r2, [r1]
 8002c3c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e1      	bne.n	8002c08 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3308      	adds	r3, #8
 8002c4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3308      	adds	r3, #8
 8002c64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c68:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c70:	e841 2300 	strex	r3, r2, [r1]
 8002c74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e3      	bne.n	8002c44 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c92:	e853 3f00 	ldrex	r3, [r3]
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c9a:	f023 0310 	bic.w	r3, r3, #16
 8002c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cac:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cb4:	e841 2300 	strex	r3, r2, [r1]
 8002cb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e4      	bne.n	8002c8a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fec4 	bl	8000a52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8d7 	bl	8002e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cea:	e0b9      	b.n	8002e60 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80ab 	beq.w	8002e64 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002d0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80a6 	beq.w	8002e64 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e4      	bne.n	8002d18 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3308      	adds	r3, #8
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	e853 3f00 	ldrex	r3, [r3]
 8002d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3308      	adds	r3, #8
 8002d6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d72:	633a      	str	r2, [r7, #48]	; 0x30
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7a:	e841 2300 	strex	r3, r2, [r1]
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1e3      	bne.n	8002d4e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0310 	bic.w	r3, r3, #16
 8002dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	69b9      	ldr	r1, [r7, #24]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e4      	bne.n	8002d9a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dd6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dda:	4619      	mov	r1, r3
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f85b 	bl	8002e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002de2:	e03f      	b.n	8002e64 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00e      	beq.n	8002e0e <HAL_UART_IRQHandler+0x56a>
 8002df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fc7b 	bl	8003702 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e0c:	e02d      	b.n	8002e6a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00e      	beq.n	8002e38 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01c      	beq.n	8002e68 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
    }
    return;
 8002e36:	e017      	b.n	8002e68 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d012      	beq.n	8002e6a <HAL_UART_IRQHandler+0x5c6>
 8002e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00c      	beq.n	8002e6a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fc2c 	bl	80036ae <UART_EndTransmit_IT>
    return;
 8002e56:	e008      	b.n	8002e6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e58:	bf00      	nop
 8002e5a:	e006      	b.n	8002e6a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e5c:	bf00      	nop
 8002e5e:	e004      	b.n	8002e6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e60:	bf00      	nop
 8002e62:	e002      	b.n	8002e6a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002e64:	bf00      	nop
 8002e66:	e000      	b.n	8002e6a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002e68:	bf00      	nop
  }

}
 8002e6a:	37e8      	adds	r7, #232	; 0xe8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b92      	ldr	r3, [pc, #584]	; (8003124 <UART_SetConfig+0x274>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a80      	ldr	r2, [pc, #512]	; (8003128 <UART_SetConfig+0x278>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d120      	bne.n	8002f6e <UART_SetConfig+0xbe>
 8002f2c:	4b7f      	ldr	r3, [pc, #508]	; (800312c <UART_SetConfig+0x27c>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d817      	bhi.n	8002f68 <UART_SetConfig+0xb8>
 8002f38:	a201      	add	r2, pc, #4	; (adr r2, 8002f40 <UART_SetConfig+0x90>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f51 	.word	0x08002f51
 8002f44:	08002f5d 	.word	0x08002f5d
 8002f48:	08002f63 	.word	0x08002f63
 8002f4c:	08002f57 	.word	0x08002f57
 8002f50:	2301      	movs	r3, #1
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e0b5      	b.n	80030c2 <UART_SetConfig+0x212>
 8002f56:	2302      	movs	r3, #2
 8002f58:	77fb      	strb	r3, [r7, #31]
 8002f5a:	e0b2      	b.n	80030c2 <UART_SetConfig+0x212>
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	77fb      	strb	r3, [r7, #31]
 8002f60:	e0af      	b.n	80030c2 <UART_SetConfig+0x212>
 8002f62:	2308      	movs	r3, #8
 8002f64:	77fb      	strb	r3, [r7, #31]
 8002f66:	e0ac      	b.n	80030c2 <UART_SetConfig+0x212>
 8002f68:	2310      	movs	r3, #16
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	e0a9      	b.n	80030c2 <UART_SetConfig+0x212>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a6f      	ldr	r2, [pc, #444]	; (8003130 <UART_SetConfig+0x280>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d124      	bne.n	8002fc2 <UART_SetConfig+0x112>
 8002f78:	4b6c      	ldr	r3, [pc, #432]	; (800312c <UART_SetConfig+0x27c>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f84:	d011      	beq.n	8002faa <UART_SetConfig+0xfa>
 8002f86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f8a:	d817      	bhi.n	8002fbc <UART_SetConfig+0x10c>
 8002f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f90:	d011      	beq.n	8002fb6 <UART_SetConfig+0x106>
 8002f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f96:	d811      	bhi.n	8002fbc <UART_SetConfig+0x10c>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <UART_SetConfig+0xf4>
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d006      	beq.n	8002fb0 <UART_SetConfig+0x100>
 8002fa2:	e00b      	b.n	8002fbc <UART_SetConfig+0x10c>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e08b      	b.n	80030c2 <UART_SetConfig+0x212>
 8002faa:	2302      	movs	r3, #2
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e088      	b.n	80030c2 <UART_SetConfig+0x212>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e085      	b.n	80030c2 <UART_SetConfig+0x212>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	e082      	b.n	80030c2 <UART_SetConfig+0x212>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e07f      	b.n	80030c2 <UART_SetConfig+0x212>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	; (8003134 <UART_SetConfig+0x284>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d124      	bne.n	8003016 <UART_SetConfig+0x166>
 8002fcc:	4b57      	ldr	r3, [pc, #348]	; (800312c <UART_SetConfig+0x27c>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002fd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fd8:	d011      	beq.n	8002ffe <UART_SetConfig+0x14e>
 8002fda:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fde:	d817      	bhi.n	8003010 <UART_SetConfig+0x160>
 8002fe0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fe4:	d011      	beq.n	800300a <UART_SetConfig+0x15a>
 8002fe6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fea:	d811      	bhi.n	8003010 <UART_SetConfig+0x160>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <UART_SetConfig+0x148>
 8002ff0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ff4:	d006      	beq.n	8003004 <UART_SetConfig+0x154>
 8002ff6:	e00b      	b.n	8003010 <UART_SetConfig+0x160>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e061      	b.n	80030c2 <UART_SetConfig+0x212>
 8002ffe:	2302      	movs	r3, #2
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e05e      	b.n	80030c2 <UART_SetConfig+0x212>
 8003004:	2304      	movs	r3, #4
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e05b      	b.n	80030c2 <UART_SetConfig+0x212>
 800300a:	2308      	movs	r3, #8
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	e058      	b.n	80030c2 <UART_SetConfig+0x212>
 8003010:	2310      	movs	r3, #16
 8003012:	77fb      	strb	r3, [r7, #31]
 8003014:	e055      	b.n	80030c2 <UART_SetConfig+0x212>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a47      	ldr	r2, [pc, #284]	; (8003138 <UART_SetConfig+0x288>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d124      	bne.n	800306a <UART_SetConfig+0x1ba>
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <UART_SetConfig+0x27c>)
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003028:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800302c:	d011      	beq.n	8003052 <UART_SetConfig+0x1a2>
 800302e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003032:	d817      	bhi.n	8003064 <UART_SetConfig+0x1b4>
 8003034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003038:	d011      	beq.n	800305e <UART_SetConfig+0x1ae>
 800303a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800303e:	d811      	bhi.n	8003064 <UART_SetConfig+0x1b4>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <UART_SetConfig+0x19c>
 8003044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003048:	d006      	beq.n	8003058 <UART_SetConfig+0x1a8>
 800304a:	e00b      	b.n	8003064 <UART_SetConfig+0x1b4>
 800304c:	2300      	movs	r3, #0
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e037      	b.n	80030c2 <UART_SetConfig+0x212>
 8003052:	2302      	movs	r3, #2
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e034      	b.n	80030c2 <UART_SetConfig+0x212>
 8003058:	2304      	movs	r3, #4
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	e031      	b.n	80030c2 <UART_SetConfig+0x212>
 800305e:	2308      	movs	r3, #8
 8003060:	77fb      	strb	r3, [r7, #31]
 8003062:	e02e      	b.n	80030c2 <UART_SetConfig+0x212>
 8003064:	2310      	movs	r3, #16
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e02b      	b.n	80030c2 <UART_SetConfig+0x212>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a33      	ldr	r2, [pc, #204]	; (800313c <UART_SetConfig+0x28c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d124      	bne.n	80030be <UART_SetConfig+0x20e>
 8003074:	4b2d      	ldr	r3, [pc, #180]	; (800312c <UART_SetConfig+0x27c>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800307c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003080:	d011      	beq.n	80030a6 <UART_SetConfig+0x1f6>
 8003082:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003086:	d817      	bhi.n	80030b8 <UART_SetConfig+0x208>
 8003088:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800308c:	d011      	beq.n	80030b2 <UART_SetConfig+0x202>
 800308e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003092:	d811      	bhi.n	80030b8 <UART_SetConfig+0x208>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <UART_SetConfig+0x1f0>
 8003098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309c:	d006      	beq.n	80030ac <UART_SetConfig+0x1fc>
 800309e:	e00b      	b.n	80030b8 <UART_SetConfig+0x208>
 80030a0:	2300      	movs	r3, #0
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e00d      	b.n	80030c2 <UART_SetConfig+0x212>
 80030a6:	2302      	movs	r3, #2
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e00a      	b.n	80030c2 <UART_SetConfig+0x212>
 80030ac:	2304      	movs	r3, #4
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	e007      	b.n	80030c2 <UART_SetConfig+0x212>
 80030b2:	2308      	movs	r3, #8
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e004      	b.n	80030c2 <UART_SetConfig+0x212>
 80030b8:	2310      	movs	r3, #16
 80030ba:	77fb      	strb	r3, [r7, #31]
 80030bc:	e001      	b.n	80030c2 <UART_SetConfig+0x212>
 80030be:	2310      	movs	r3, #16
 80030c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ca:	d16b      	bne.n	80031a4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80030cc:	7ffb      	ldrb	r3, [r7, #31]
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d838      	bhi.n	8003144 <UART_SetConfig+0x294>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <UART_SetConfig+0x228>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	08003105 	.word	0x08003105
 80030e0:	0800310d 	.word	0x0800310d
 80030e4:	08003145 	.word	0x08003145
 80030e8:	08003113 	.word	0x08003113
 80030ec:	08003145 	.word	0x08003145
 80030f0:	08003145 	.word	0x08003145
 80030f4:	08003145 	.word	0x08003145
 80030f8:	0800311b 	.word	0x0800311b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030fc:	f7ff f922 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 8003100:	61b8      	str	r0, [r7, #24]
        break;
 8003102:	e024      	b.n	800314e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003104:	f7ff f940 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 8003108:	61b8      	str	r0, [r7, #24]
        break;
 800310a:	e020      	b.n	800314e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <UART_SetConfig+0x290>)
 800310e:	61bb      	str	r3, [r7, #24]
        break;
 8003110:	e01d      	b.n	800314e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003112:	f7ff f8a1 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8003116:	61b8      	str	r0, [r7, #24]
        break;
 8003118:	e019      	b.n	800314e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800311e:	61bb      	str	r3, [r7, #24]
        break;
 8003120:	e015      	b.n	800314e <UART_SetConfig+0x29e>
 8003122:	bf00      	nop
 8003124:	efff69f3 	.word	0xefff69f3
 8003128:	40013800 	.word	0x40013800
 800312c:	40021000 	.word	0x40021000
 8003130:	40004400 	.word	0x40004400
 8003134:	40004800 	.word	0x40004800
 8003138:	40004c00 	.word	0x40004c00
 800313c:	40005000 	.word	0x40005000
 8003140:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	77bb      	strb	r3, [r7, #30]
        break;
 800314c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d073      	beq.n	800323c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	005a      	lsls	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	441a      	add	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b0f      	cmp	r3, #15
 800316e:	d916      	bls.n	800319e <UART_SetConfig+0x2ee>
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003176:	d212      	bcs.n	800319e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f023 030f 	bic.w	r3, r3, #15
 8003180:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	b29b      	uxth	r3, r3
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	b29a      	uxth	r2, r3
 800318e:	89fb      	ldrh	r3, [r7, #14]
 8003190:	4313      	orrs	r3, r2
 8003192:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	89fa      	ldrh	r2, [r7, #14]
 800319a:	60da      	str	r2, [r3, #12]
 800319c:	e04e      	b.n	800323c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	77bb      	strb	r3, [r7, #30]
 80031a2:	e04b      	b.n	800323c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031a4:	7ffb      	ldrb	r3, [r7, #31]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d827      	bhi.n	80031fa <UART_SetConfig+0x34a>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <UART_SetConfig+0x300>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031d5 	.word	0x080031d5
 80031b4:	080031dd 	.word	0x080031dd
 80031b8:	080031e5 	.word	0x080031e5
 80031bc:	080031fb 	.word	0x080031fb
 80031c0:	080031eb 	.word	0x080031eb
 80031c4:	080031fb 	.word	0x080031fb
 80031c8:	080031fb 	.word	0x080031fb
 80031cc:	080031fb 	.word	0x080031fb
 80031d0:	080031f3 	.word	0x080031f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031d4:	f7ff f8b6 	bl	8002344 <HAL_RCC_GetPCLK1Freq>
 80031d8:	61b8      	str	r0, [r7, #24]
        break;
 80031da:	e013      	b.n	8003204 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031dc:	f7ff f8d4 	bl	8002388 <HAL_RCC_GetPCLK2Freq>
 80031e0:	61b8      	str	r0, [r7, #24]
        break;
 80031e2:	e00f      	b.n	8003204 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <UART_SetConfig+0x3a4>)
 80031e6:	61bb      	str	r3, [r7, #24]
        break;
 80031e8:	e00c      	b.n	8003204 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ea:	f7ff f835 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 80031ee:	61b8      	str	r0, [r7, #24]
        break;
 80031f0:	e008      	b.n	8003204 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031f6:	61bb      	str	r3, [r7, #24]
        break;
 80031f8:	e004      	b.n	8003204 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	77bb      	strb	r3, [r7, #30]
        break;
 8003202:	bf00      	nop
    }

    if (pclk != 0U)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d018      	beq.n	800323c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	085a      	lsrs	r2, r3, #1
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	441a      	add	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b0f      	cmp	r3, #15
 8003222:	d909      	bls.n	8003238 <UART_SetConfig+0x388>
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d205      	bcs.n	8003238 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	b29a      	uxth	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	e001      	b.n	800323c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003248:	7fbb      	ldrb	r3, [r7, #30]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	007a1200 	.word	0x007a1200

08003258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01a      	beq.n	800336e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003356:	d10a      	bne.n	800336e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b098      	sub	sp, #96	; 0x60
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033ac:	f7fd fa34 	bl	8000818 <HAL_GetTick>
 80033b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d12e      	bne.n	800341e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c8:	2200      	movs	r2, #0
 80033ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f88c 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d021      	beq.n	800341e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ee:	653b      	str	r3, [r7, #80]	; 0x50
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f8:	647b      	str	r3, [r7, #68]	; 0x44
 80033fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e6      	bne.n	80033da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e062      	b.n	80034e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b04      	cmp	r3, #4
 800342a:	d149      	bne.n	80034c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f856 	bl	80034ec <UART_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d03c      	beq.n	80034c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	623b      	str	r3, [r7, #32]
   return(result);
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800345a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
 8003466:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800346a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e6      	bne.n	8003446 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3308      	adds	r3, #8
 800347e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	60fb      	str	r3, [r7, #12]
   return(result);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3308      	adds	r3, #8
 8003496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003498:	61fa      	str	r2, [r7, #28]
 800349a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	69b9      	ldr	r1, [r7, #24]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	617b      	str	r3, [r7, #20]
   return(result);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e5      	bne.n	8003478 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e011      	b.n	80034e4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3758      	adds	r7, #88	; 0x58
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fc:	e049      	b.n	8003592 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003504:	d045      	beq.n	8003592 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003506:	f7fd f987 	bl	8000818 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <UART_WaitOnFlagUntilTimeout+0x30>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e048      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d031      	beq.n	8003592 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b08      	cmp	r3, #8
 800353a:	d110      	bne.n	800355e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2208      	movs	r2, #8
 8003542:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f838 	bl	80035ba <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2208      	movs	r2, #8
 800354e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e029      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356c:	d111      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003576:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f81e 	bl	80035ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2220      	movs	r2, #32
 8003582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e00f      	b.n	80035b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4013      	ands	r3, r2
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	429a      	cmp	r2, r3
 80035a0:	bf0c      	ite	eq
 80035a2:	2301      	moveq	r3, #1
 80035a4:	2300      	movne	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d0a6      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b095      	sub	sp, #84	; 0x54
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e0:	643b      	str	r3, [r7, #64]	; 0x40
 80035e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035e8:	e841 2300 	strex	r3, r2, [r1]
 80035ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e6      	bne.n	80035c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3308      	adds	r3, #8
 80035fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	e853 3f00 	ldrex	r3, [r3]
 8003602:	61fb      	str	r3, [r7, #28]
   return(result);
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	64bb      	str	r3, [r7, #72]	; 0x48
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003614:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800361a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361c:	e841 2300 	strex	r3, r2, [r1]
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1e5      	bne.n	80035f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362c:	2b01      	cmp	r3, #1
 800362e:	d118      	bne.n	8003662 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	e853 3f00 	ldrex	r3, [r3]
 800363c:	60bb      	str	r3, [r7, #8]
   return(result);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f023 0310 	bic.w	r3, r3, #16
 8003644:	647b      	str	r3, [r7, #68]	; 0x44
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800364e:	61bb      	str	r3, [r7, #24]
 8003650:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	613b      	str	r3, [r7, #16]
   return(result);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e6      	bne.n	8003630 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003676:	bf00      	nop
 8003678:	3754      	adds	r7, #84	; 0x54
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7ff fbef 	bl	8002e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b088      	sub	sp, #32
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	6979      	ldr	r1, [r7, #20]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	e841 2300 	strex	r3, r2, [r1]
 80036e0:	613b      	str	r3, [r7, #16]
   return(result);
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1e6      	bne.n	80036b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff fbbb 	bl	8002e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036fa:	bf00      	nop
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003728:	2b84      	cmp	r3, #132	; 0x84
 800372a:	d005      	beq.n	8003738 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800372c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	3303      	adds	r3, #3
 8003736:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800374a:	f000 fad5 	bl	8003cf8 <vTaskStartScheduler>
  
  return osOK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}

08003754 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	b089      	sub	sp, #36	; 0x24
 8003758:	af04      	add	r7, sp, #16
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d020      	beq.n	80037a8 <osThreadCreate+0x54>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d01c      	beq.n	80037a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685c      	ldr	r4, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691e      	ldr	r6, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ffc8 	bl	8003716 <makeFreeRtosPriority>
 8003786:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003790:	9202      	str	r2, [sp, #8]
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	9100      	str	r1, [sp, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	4632      	mov	r2, r6
 800379a:	4629      	mov	r1, r5
 800379c:	4620      	mov	r0, r4
 800379e:	f000 f8ed 	bl	800397c <xTaskCreateStatic>
 80037a2:	4603      	mov	r3, r0
 80037a4:	60fb      	str	r3, [r7, #12]
 80037a6:	e01c      	b.n	80037e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685c      	ldr	r4, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037b4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ffaa 	bl	8003716 <makeFreeRtosPriority>
 80037c2:	4602      	mov	r2, r0
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	9200      	str	r2, [sp, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4632      	mov	r2, r6
 80037d0:	4629      	mov	r1, r5
 80037d2:	4620      	mov	r0, r4
 80037d4:	f000 f92e 	bl	8003a34 <xTaskCreate>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d001      	beq.n	80037e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <osDelay+0x16>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	e000      	b.n	8003804 <osDelay+0x18>
 8003802:	2301      	movs	r3, #1
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fa43 	bl	8003c90 <vTaskDelay>
  
  return osOK;
 800380a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f103 0208 	add.w	r2, r3, #8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f04f 32ff 	mov.w	r2, #4294967295
 800382c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f103 0208 	add.w	r2, r3, #8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f103 0208 	add.w	r2, r3, #8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d103      	bne.n	80038d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e00c      	b.n	80038f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3308      	adds	r3, #8
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e002      	b.n	80038e4 <vListInsert+0x2e>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d2f6      	bcs.n	80038de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6892      	ldr	r2, [r2, #8]
 800393e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6852      	ldr	r2, [r2, #4]
 8003948:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d103      	bne.n	800395c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	1e5a      	subs	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08e      	sub	sp, #56	; 0x38
 8003980:	af04      	add	r7, sp, #16
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800398a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10a      	bne.n	80039a6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039a2:	bf00      	nop
 80039a4:	e7fe      	b.n	80039a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	61fb      	str	r3, [r7, #28]
}
 80039be:	bf00      	nop
 80039c0:	e7fe      	b.n	80039c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039c2:	2354      	movs	r3, #84	; 0x54
 80039c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b54      	cmp	r3, #84	; 0x54
 80039ca:	d00a      	beq.n	80039e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61bb      	str	r3, [r7, #24]
}
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01e      	beq.n	8003a26 <xTaskCreateStatic+0xaa>
 80039e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01b      	beq.n	8003a26 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a00:	2300      	movs	r3, #0
 8003a02:	9303      	str	r3, [sp, #12]
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	9302      	str	r3, [sp, #8]
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f850 	bl	8003abe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a20:	f000 f8cc 	bl	8003bbc <prvAddNewTaskToReadyList>
 8003a24:	e001      	b.n	8003a2a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a2a:	697b      	ldr	r3, [r7, #20]
	}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3728      	adds	r7, #40	; 0x28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08c      	sub	sp, #48	; 0x30
 8003a38:	af04      	add	r7, sp, #16
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a44:	88fb      	ldrh	r3, [r7, #6]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fee5 	bl	8004818 <pvPortMalloc>
 8003a4e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00e      	beq.n	8003a74 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a56:	2054      	movs	r0, #84	; 0x54
 8003a58:	f000 fede 	bl	8004818 <pvPortMalloc>
 8003a5c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
 8003a6a:	e005      	b.n	8003a78 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a6c:	6978      	ldr	r0, [r7, #20]
 8003a6e:	f000 ff97 	bl	80049a0 <vPortFree>
 8003a72:	e001      	b.n	8003a78 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d017      	beq.n	8003aae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9303      	str	r3, [sp, #12]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	9302      	str	r3, [sp, #8]
 8003a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f000 f80e 	bl	8003abe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aa2:	69f8      	ldr	r0, [r7, #28]
 8003aa4:	f000 f88a 	bl	8003bbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	61bb      	str	r3, [r7, #24]
 8003aac:	e002      	b.n	8003ab4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
	}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b088      	sub	sp, #32
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f023 0307 	bic.w	r3, r3, #7
 8003ae4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	617b      	str	r3, [r7, #20]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e012      	b.n	8003b32 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	7819      	ldrb	r1, [r3, #0]
 8003b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3334      	adds	r3, #52	; 0x34
 8003b1c:	460a      	mov	r2, r1
 8003b1e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b0f      	cmp	r3, #15
 8003b36:	d9e9      	bls.n	8003b0c <prvInitialiseNewTask+0x4e>
 8003b38:	e000      	b.n	8003b3c <prvInitialiseNewTask+0x7e>
		{
			break;
 8003b3a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d901      	bls.n	8003b4e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b4a:	2306      	movs	r3, #6
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	3304      	adds	r3, #4
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff fe75 	bl	8003854 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	3318      	adds	r3, #24
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff fe70 	bl	8003854 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7c:	f1c3 0207 	rsb	r2, r3, #7
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	69b8      	ldr	r0, [r7, #24]
 8003b9e:	f000 fc2f 	bl	8004400 <pxPortInitialiseStack>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bc4:	f000 fd46 	bl	8004654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <prvAddNewTaskToReadyList+0xb8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	4a29      	ldr	r2, [pc, #164]	; (8003c74 <prvAddNewTaskToReadyList+0xb8>)
 8003bd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bd2:	4b29      	ldr	r3, [pc, #164]	; (8003c78 <prvAddNewTaskToReadyList+0xbc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bda:	4a27      	ldr	r2, [pc, #156]	; (8003c78 <prvAddNewTaskToReadyList+0xbc>)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <prvAddNewTaskToReadyList+0xb8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d110      	bne.n	8003c0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003be8:	f000 fac2 	bl	8004170 <prvInitialiseTaskLists>
 8003bec:	e00d      	b.n	8003c0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <prvAddNewTaskToReadyList+0xc0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <prvAddNewTaskToReadyList+0xbc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d802      	bhi.n	8003c0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c04:	4a1c      	ldr	r2, [pc, #112]	; (8003c78 <prvAddNewTaskToReadyList+0xbc>)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <prvAddNewTaskToReadyList+0xc4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <prvAddNewTaskToReadyList+0xc4>)
 8003c12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	2201      	movs	r2, #1
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <prvAddNewTaskToReadyList+0xc8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	4a18      	ldr	r2, [pc, #96]	; (8003c84 <prvAddNewTaskToReadyList+0xc8>)
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4a15      	ldr	r2, [pc, #84]	; (8003c88 <prvAddNewTaskToReadyList+0xcc>)
 8003c34:	441a      	add	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	f7ff fe16 	bl	800386e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c42:	f000 fd37 	bl	80046b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <prvAddNewTaskToReadyList+0xc0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00e      	beq.n	8003c6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c4e:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <prvAddNewTaskToReadyList+0xbc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d207      	bcs.n	8003c6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <prvAddNewTaskToReadyList+0xd0>)
 8003c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000414 	.word	0x20000414
 8003c78:	20000314 	.word	0x20000314
 8003c7c:	20000420 	.word	0x20000420
 8003c80:	20000430 	.word	0x20000430
 8003c84:	2000041c 	.word	0x2000041c
 8003c88:	20000318 	.word	0x20000318
 8003c8c:	e000ed04 	.word	0xe000ed04

08003c90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d017      	beq.n	8003cd2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <vTaskDelay+0x60>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <vTaskDelay+0x30>
	__asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60bb      	str	r3, [r7, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cc0:	f000 f87a 	bl	8003db8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fb34 	bl	8004334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ccc:	f000 f882 	bl	8003dd4 <xTaskResumeAll>
 8003cd0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d107      	bne.n	8003ce8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <vTaskDelay+0x64>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	2000043c 	.word	0x2000043c
 8003cf4:	e000ed04 	.word	0xe000ed04

08003cf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d06:	463a      	mov	r2, r7
 8003d08:	1d39      	adds	r1, r7, #4
 8003d0a:	f107 0308 	add.w	r3, r7, #8
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fc fa92 	bl	8000238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d14:	6839      	ldr	r1, [r7, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	9202      	str	r2, [sp, #8]
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	460a      	mov	r2, r1
 8003d26:	491e      	ldr	r1, [pc, #120]	; (8003da0 <vTaskStartScheduler+0xa8>)
 8003d28:	481e      	ldr	r0, [pc, #120]	; (8003da4 <vTaskStartScheduler+0xac>)
 8003d2a:	f7ff fe27 	bl	800397c <xTaskCreateStatic>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a1d      	ldr	r2, [pc, #116]	; (8003da8 <vTaskStartScheduler+0xb0>)
 8003d32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <vTaskStartScheduler+0xb0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d002      	beq.n	8003d42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e001      	b.n	8003d46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d116      	bne.n	8003d7a <vTaskStartScheduler+0x82>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	613b      	str	r3, [r7, #16]
}
 8003d5e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <vTaskStartScheduler+0xb4>)
 8003d62:	f04f 32ff 	mov.w	r2, #4294967295
 8003d66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <vTaskStartScheduler+0xb8>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <vTaskStartScheduler+0xbc>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d74:	f000 fbcc 	bl	8004510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d78:	e00e      	b.n	8003d98 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d10a      	bne.n	8003d98 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60fb      	str	r3, [r7, #12]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vTaskStartScheduler+0x9e>
}
 8003d98:	bf00      	nop
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	08004c90 	.word	0x08004c90
 8003da4:	08004141 	.word	0x08004141
 8003da8:	20000438 	.word	0x20000438
 8003dac:	20000434 	.word	0x20000434
 8003db0:	20000420 	.word	0x20000420
 8003db4:	20000418 	.word	0x20000418

08003db8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <vTaskSuspendAll+0x18>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	4a03      	ldr	r2, [pc, #12]	; (8003dd0 <vTaskSuspendAll+0x18>)
 8003dc4:	6013      	str	r3, [r2, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	2000043c 	.word	0x2000043c

08003dd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003de2:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <xTaskResumeAll+0x114>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <xTaskResumeAll+0x2c>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	603b      	str	r3, [r7, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e00:	f000 fc28 	bl	8004654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e04:	4b38      	ldr	r3, [pc, #224]	; (8003ee8 <xTaskResumeAll+0x114>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	4a37      	ldr	r2, [pc, #220]	; (8003ee8 <xTaskResumeAll+0x114>)
 8003e0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e0e:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <xTaskResumeAll+0x114>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d161      	bne.n	8003eda <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e16:	4b35      	ldr	r3, [pc, #212]	; (8003eec <xTaskResumeAll+0x118>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d05d      	beq.n	8003eda <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e1e:	e02e      	b.n	8003e7e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e20:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <xTaskResumeAll+0x11c>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	3318      	adds	r3, #24
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fd7b 	bl	8003928 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fd76 	bl	8003928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	2201      	movs	r2, #1
 8003e42:	409a      	lsls	r2, r3
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <xTaskResumeAll+0x120>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <xTaskResumeAll+0x120>)
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4a27      	ldr	r2, [pc, #156]	; (8003ef8 <xTaskResumeAll+0x124>)
 8003e5c:	441a      	add	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f7ff fd02 	bl	800386e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	4b23      	ldr	r3, [pc, #140]	; (8003efc <xTaskResumeAll+0x128>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e78:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <xTaskResumeAll+0x12c>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <xTaskResumeAll+0x11c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1cc      	bne.n	8003e20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e8c:	f000 fa0e 	bl	80042ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e90:	4b1c      	ldr	r3, [pc, #112]	; (8003f04 <xTaskResumeAll+0x130>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d010      	beq.n	8003ebe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e9c:	f000 f836 	bl	8003f0c <xTaskIncrementTick>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <xTaskResumeAll+0x12c>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1f1      	bne.n	8003e9c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <xTaskResumeAll+0x130>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ebe:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <xTaskResumeAll+0x12c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <xTaskResumeAll+0x134>)
 8003ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eda:	f000 fbeb 	bl	80046b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003ede:	68bb      	ldr	r3, [r7, #8]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	2000043c 	.word	0x2000043c
 8003eec:	20000414 	.word	0x20000414
 8003ef0:	200003d4 	.word	0x200003d4
 8003ef4:	2000041c 	.word	0x2000041c
 8003ef8:	20000318 	.word	0x20000318
 8003efc:	20000314 	.word	0x20000314
 8003f00:	20000428 	.word	0x20000428
 8003f04:	20000424 	.word	0x20000424
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f16:	4b51      	ldr	r3, [pc, #324]	; (800405c <xTaskIncrementTick+0x150>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 808d 	bne.w	800403a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f20:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <xTaskIncrementTick+0x154>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f28:	4a4d      	ldr	r2, [pc, #308]	; (8004060 <xTaskIncrementTick+0x154>)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d120      	bne.n	8003f76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f34:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <xTaskIncrementTick+0x158>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <xTaskIncrementTick+0x48>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	603b      	str	r3, [r7, #0]
}
 8003f50:	bf00      	nop
 8003f52:	e7fe      	b.n	8003f52 <xTaskIncrementTick+0x46>
 8003f54:	4b43      	ldr	r3, [pc, #268]	; (8004064 <xTaskIncrementTick+0x158>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	4b43      	ldr	r3, [pc, #268]	; (8004068 <xTaskIncrementTick+0x15c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a41      	ldr	r2, [pc, #260]	; (8004064 <xTaskIncrementTick+0x158>)
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4a41      	ldr	r2, [pc, #260]	; (8004068 <xTaskIncrementTick+0x15c>)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4b40      	ldr	r3, [pc, #256]	; (800406c <xTaskIncrementTick+0x160>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	4a3f      	ldr	r2, [pc, #252]	; (800406c <xTaskIncrementTick+0x160>)
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	f000 f99b 	bl	80042ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f76:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <xTaskIncrementTick+0x164>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d34d      	bcc.n	800401c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f80:	4b38      	ldr	r3, [pc, #224]	; (8004064 <xTaskIncrementTick+0x158>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <xTaskIncrementTick+0x82>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <xTaskIncrementTick+0x84>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f94:	4b36      	ldr	r3, [pc, #216]	; (8004070 <xTaskIncrementTick+0x164>)
 8003f96:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9a:	601a      	str	r2, [r3, #0]
					break;
 8003f9c:	e03e      	b.n	800401c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f9e:	4b31      	ldr	r3, [pc, #196]	; (8004064 <xTaskIncrementTick+0x158>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d203      	bcs.n	8003fbe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fb6:	4a2e      	ldr	r2, [pc, #184]	; (8004070 <xTaskIncrementTick+0x164>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6013      	str	r3, [r2, #0]
						break;
 8003fbc:	e02e      	b.n	800401c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fcb0 	bl	8003928 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	3318      	adds	r3, #24
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fca7 	bl	8003928 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	2201      	movs	r2, #1
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	4b24      	ldr	r3, [pc, #144]	; (8004074 <xTaskIncrementTick+0x168>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	4a22      	ldr	r2, [pc, #136]	; (8004074 <xTaskIncrementTick+0x168>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <xTaskIncrementTick+0x16c>)
 8003ffa:	441a      	add	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f7ff fc33 	bl	800386e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <xTaskIncrementTick+0x170>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	429a      	cmp	r2, r3
 8004014:	d3b4      	bcc.n	8003f80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800401a:	e7b1      	b.n	8003f80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <xTaskIncrementTick+0x170>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	4915      	ldr	r1, [pc, #84]	; (8004078 <xTaskIncrementTick+0x16c>)
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d907      	bls.n	8004044 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e004      	b.n	8004044 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <xTaskIncrementTick+0x174>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3301      	adds	r3, #1
 8004040:	4a0f      	ldr	r2, [pc, #60]	; (8004080 <xTaskIncrementTick+0x174>)
 8004042:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <xTaskIncrementTick+0x178>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800404c:	2301      	movs	r3, #1
 800404e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004050:	697b      	ldr	r3, [r7, #20]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2000043c 	.word	0x2000043c
 8004060:	20000418 	.word	0x20000418
 8004064:	200003cc 	.word	0x200003cc
 8004068:	200003d0 	.word	0x200003d0
 800406c:	2000042c 	.word	0x2000042c
 8004070:	20000434 	.word	0x20000434
 8004074:	2000041c 	.word	0x2000041c
 8004078:	20000318 	.word	0x20000318
 800407c:	20000314 	.word	0x20000314
 8004080:	20000424 	.word	0x20000424
 8004084:	20000428 	.word	0x20000428

08004088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800408e:	4b27      	ldr	r3, [pc, #156]	; (800412c <vTaskSwitchContext+0xa4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <vTaskSwitchContext+0xa8>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800409c:	e03f      	b.n	800411e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <vTaskSwitchContext+0xa8>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040a4:	4b23      	ldr	r3, [pc, #140]	; (8004134 <vTaskSwitchContext+0xac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	fab3 f383 	clz	r3, r3
 80040b0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040b2:	7afb      	ldrb	r3, [r7, #11]
 80040b4:	f1c3 031f 	rsb	r3, r3, #31
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	491f      	ldr	r1, [pc, #124]	; (8004138 <vTaskSwitchContext+0xb0>)
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	607b      	str	r3, [r7, #4]
}
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <vTaskSwitchContext+0x5a>
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4a12      	ldr	r2, [pc, #72]	; (8004138 <vTaskSwitchContext+0xb0>)
 80040f0:	4413      	add	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	3308      	adds	r3, #8
 8004106:	429a      	cmp	r2, r3
 8004108:	d104      	bne.n	8004114 <vTaskSwitchContext+0x8c>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	4a08      	ldr	r2, [pc, #32]	; (800413c <vTaskSwitchContext+0xb4>)
 800411c:	6013      	str	r3, [r2, #0]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	2000043c 	.word	0x2000043c
 8004130:	20000428 	.word	0x20000428
 8004134:	2000041c 	.word	0x2000041c
 8004138:	20000318 	.word	0x20000318
 800413c:	20000314 	.word	0x20000314

08004140 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004148:	f000 f852 	bl	80041f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <prvIdleTask+0x28>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d9f9      	bls.n	8004148 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <prvIdleTask+0x2c>)
 8004156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004164:	e7f0      	b.n	8004148 <prvIdleTask+0x8>
 8004166:	bf00      	nop
 8004168:	20000318 	.word	0x20000318
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004176:	2300      	movs	r3, #0
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	e00c      	b.n	8004196 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <prvInitialiseTaskLists+0x60>)
 8004188:	4413      	add	r3, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fb42 	bl	8003814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3301      	adds	r3, #1
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b06      	cmp	r3, #6
 800419a:	d9ef      	bls.n	800417c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800419c:	480d      	ldr	r0, [pc, #52]	; (80041d4 <prvInitialiseTaskLists+0x64>)
 800419e:	f7ff fb39 	bl	8003814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041a2:	480d      	ldr	r0, [pc, #52]	; (80041d8 <prvInitialiseTaskLists+0x68>)
 80041a4:	f7ff fb36 	bl	8003814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041a8:	480c      	ldr	r0, [pc, #48]	; (80041dc <prvInitialiseTaskLists+0x6c>)
 80041aa:	f7ff fb33 	bl	8003814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041ae:	480c      	ldr	r0, [pc, #48]	; (80041e0 <prvInitialiseTaskLists+0x70>)
 80041b0:	f7ff fb30 	bl	8003814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041b4:	480b      	ldr	r0, [pc, #44]	; (80041e4 <prvInitialiseTaskLists+0x74>)
 80041b6:	f7ff fb2d 	bl	8003814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041ba:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <prvInitialiseTaskLists+0x78>)
 80041bc:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <prvInitialiseTaskLists+0x64>)
 80041be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <prvInitialiseTaskLists+0x7c>)
 80041c2:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <prvInitialiseTaskLists+0x68>)
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20000318 	.word	0x20000318
 80041d4:	200003a4 	.word	0x200003a4
 80041d8:	200003b8 	.word	0x200003b8
 80041dc:	200003d4 	.word	0x200003d4
 80041e0:	200003e8 	.word	0x200003e8
 80041e4:	20000400 	.word	0x20000400
 80041e8:	200003cc 	.word	0x200003cc
 80041ec:	200003d0 	.word	0x200003d0

080041f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041f6:	e019      	b.n	800422c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041f8:	f000 fa2c 	bl	8004654 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <prvCheckTasksWaitingTermination+0x50>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fb8d 	bl	8003928 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <prvCheckTasksWaitingTermination+0x54>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3b01      	subs	r3, #1
 8004214:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <prvCheckTasksWaitingTermination+0x54>)
 8004216:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <prvCheckTasksWaitingTermination+0x58>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3b01      	subs	r3, #1
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <prvCheckTasksWaitingTermination+0x58>)
 8004220:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004222:	f000 fa47 	bl	80046b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f810 	bl	800424c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <prvCheckTasksWaitingTermination+0x58>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e1      	bne.n	80041f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	200003e8 	.word	0x200003e8
 8004244:	20000414 	.word	0x20000414
 8004248:	200003fc 	.word	0x200003fc

0800424c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800425a:	2b00      	cmp	r3, #0
 800425c:	d108      	bne.n	8004270 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fb9c 	bl	80049a0 <vPortFree>
				vPortFree( pxTCB );
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fb99 	bl	80049a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800426e:	e018      	b.n	80042a2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004276:	2b01      	cmp	r3, #1
 8004278:	d103      	bne.n	8004282 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fb90 	bl	80049a0 <vPortFree>
	}
 8004280:	e00f      	b.n	80042a2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004288:	2b02      	cmp	r3, #2
 800428a:	d00a      	beq.n	80042a2 <prvDeleteTCB+0x56>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	60fb      	str	r3, [r7, #12]
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <prvDeleteTCB+0x54>
	}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <prvResetNextTaskUnblockTime+0x44>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <prvResetNextTaskUnblockTime+0x14>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <prvResetNextTaskUnblockTime+0x16>
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042c6:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <prvResetNextTaskUnblockTime+0x48>)
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042ce:	e008      	b.n	80042e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <prvResetNextTaskUnblockTime+0x44>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a05      	ldr	r2, [pc, #20]	; (80042f4 <prvResetNextTaskUnblockTime+0x48>)
 80042e0:	6013      	str	r3, [r2, #0]
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200003cc 	.word	0x200003cc
 80042f4:	20000434 	.word	0x20000434

080042f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042fe:	4b0b      	ldr	r3, [pc, #44]	; (800432c <xTaskGetSchedulerState+0x34>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004306:	2301      	movs	r3, #1
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	e008      	b.n	800431e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800430c:	4b08      	ldr	r3, [pc, #32]	; (8004330 <xTaskGetSchedulerState+0x38>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004314:	2302      	movs	r3, #2
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	e001      	b.n	800431e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800431e:	687b      	ldr	r3, [r7, #4]
	}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	20000420 	.word	0x20000420
 8004330:	2000043c 	.word	0x2000043c

08004334 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800433e:	4b29      	ldr	r3, [pc, #164]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3304      	adds	r3, #4
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff faec 	bl	8003928 <uxListRemove>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10b      	bne.n	800436e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004356:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	2201      	movs	r2, #1
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	4b21      	ldr	r3, [pc, #132]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4013      	ands	r3, r2
 800436a:	4a20      	ldr	r2, [pc, #128]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800436c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d10a      	bne.n	800438c <prvAddCurrentTaskToDelayedList+0x58>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800437c:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	481a      	ldr	r0, [pc, #104]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004386:	f7ff fa72 	bl	800386e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800438a:	e026      	b.n	80043da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d209      	bcs.n	80043b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7ff fa80 	bl	80038b6 <vListInsert>
}
 80043b6:	e010      	b.n	80043da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f7ff fa76 	bl	80038b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043ca:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d202      	bcs.n	80043da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043d4:	4a09      	ldr	r2, [pc, #36]	; (80043fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6013      	str	r3, [r2, #0]
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000418 	.word	0x20000418
 80043e8:	20000314 	.word	0x20000314
 80043ec:	2000041c 	.word	0x2000041c
 80043f0:	20000400 	.word	0x20000400
 80043f4:	200003d0 	.word	0x200003d0
 80043f8:	200003cc 	.word	0x200003cc
 80043fc:	20000434 	.word	0x20000434

08004400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3b04      	subs	r3, #4
 8004410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3b04      	subs	r3, #4
 800441e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f023 0201 	bic.w	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3b04      	subs	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004430:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <pxPortInitialiseStack+0x64>)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3b14      	subs	r3, #20
 800443a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b04      	subs	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f06f 0202 	mvn.w	r2, #2
 800444e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3b20      	subs	r3, #32
 8004454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004456:	68fb      	ldr	r3, [r7, #12]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	08004469 	.word	0x08004469

08004468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <prvTaskExitError+0x54>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d00a      	beq.n	8004492 <prvTaskExitError+0x2a>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <prvTaskExitError+0x28>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	60bb      	str	r3, [r7, #8]
}
 80044a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044a6:	bf00      	nop
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0fc      	beq.n	80044a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	2000000c 	.word	0x2000000c

080044c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <pxCurrentTCBConst2>)
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	6808      	ldr	r0, [r1, #0]
 80044c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	f380 8809 	msr	PSP, r0
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f380 8811 	msr	BASEPRI, r0
 80044da:	4770      	bx	lr
 80044dc:	f3af 8000 	nop.w

080044e0 <pxCurrentTCBConst2>:
 80044e0:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop

080044e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044e8:	4808      	ldr	r0, [pc, #32]	; (800450c <prvPortStartFirstTask+0x24>)
 80044ea:	6800      	ldr	r0, [r0, #0]
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f380 8808 	msr	MSP, r0
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f380 8814 	msr	CONTROL, r0
 80044fa:	b662      	cpsie	i
 80044fc:	b661      	cpsie	f
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	df00      	svc	0
 8004508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800450a:	bf00      	nop
 800450c:	e000ed08 	.word	0xe000ed08

08004510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004516:	4b46      	ldr	r3, [pc, #280]	; (8004630 <xPortStartScheduler+0x120>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a46      	ldr	r2, [pc, #280]	; (8004634 <xPortStartScheduler+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10a      	bne.n	8004536 <xPortStartScheduler+0x26>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	613b      	str	r3, [r7, #16]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004536:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <xPortStartScheduler+0x120>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a3f      	ldr	r2, [pc, #252]	; (8004638 <xPortStartScheduler+0x128>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10a      	bne.n	8004556 <xPortStartScheduler+0x46>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60fb      	str	r3, [r7, #12]
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <xPortStartScheduler+0x12c>)
 8004558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	22ff      	movs	r2, #255	; 0xff
 8004566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004578:	b2da      	uxtb	r2, r3
 800457a:	4b31      	ldr	r3, [pc, #196]	; (8004640 <xPortStartScheduler+0x130>)
 800457c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800457e:	4b31      	ldr	r3, [pc, #196]	; (8004644 <xPortStartScheduler+0x134>)
 8004580:	2207      	movs	r2, #7
 8004582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004584:	e009      	b.n	800459a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004586:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <xPortStartScheduler+0x134>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3b01      	subs	r3, #1
 800458c:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <xPortStartScheduler+0x134>)
 800458e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b80      	cmp	r3, #128	; 0x80
 80045a4:	d0ef      	beq.n	8004586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <xPortStartScheduler+0x134>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d00a      	beq.n	80045c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	60bb      	str	r3, [r7, #8]
}
 80045c4:	bf00      	nop
 80045c6:	e7fe      	b.n	80045c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <xPortStartScheduler+0x134>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	4a1d      	ldr	r2, [pc, #116]	; (8004644 <xPortStartScheduler+0x134>)
 80045d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045d2:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <xPortStartScheduler+0x134>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045da:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <xPortStartScheduler+0x134>)
 80045dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045e6:	4b18      	ldr	r3, [pc, #96]	; (8004648 <xPortStartScheduler+0x138>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <xPortStartScheduler+0x138>)
 80045ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045f2:	4b15      	ldr	r3, [pc, #84]	; (8004648 <xPortStartScheduler+0x138>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <xPortStartScheduler+0x138>)
 80045f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045fe:	f000 f8dd 	bl	80047bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <xPortStartScheduler+0x13c>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004608:	f000 f8fc 	bl	8004804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800460c:	4b10      	ldr	r3, [pc, #64]	; (8004650 <xPortStartScheduler+0x140>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0f      	ldr	r2, [pc, #60]	; (8004650 <xPortStartScheduler+0x140>)
 8004612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004618:	f7ff ff66 	bl	80044e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800461c:	f7ff fd34 	bl	8004088 <vTaskSwitchContext>
	prvTaskExitError();
 8004620:	f7ff ff22 	bl	8004468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	e000ed00 	.word	0xe000ed00
 8004634:	410fc271 	.word	0x410fc271
 8004638:	410fc270 	.word	0x410fc270
 800463c:	e000e400 	.word	0xe000e400
 8004640:	20000440 	.word	0x20000440
 8004644:	20000444 	.word	0x20000444
 8004648:	e000ed20 	.word	0xe000ed20
 800464c:	2000000c 	.word	0x2000000c
 8004650:	e000ef34 	.word	0xe000ef34

08004654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	607b      	str	r3, [r7, #4]
}
 800466c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <vPortEnterCritical+0x58>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	4a0d      	ldr	r2, [pc, #52]	; (80046ac <vPortEnterCritical+0x58>)
 8004676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004678:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <vPortEnterCritical+0x58>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10f      	bne.n	80046a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <vPortEnterCritical+0x5c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	603b      	str	r3, [r7, #0]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <vPortEnterCritical+0x4a>
	}
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <vPortExitCritical+0x50>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <vPortExitCritical+0x24>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	607b      	str	r3, [r7, #4]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <vPortExitCritical+0x50>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3b01      	subs	r3, #1
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <vPortExitCritical+0x50>)
 80046e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <vPortExitCritical+0x50>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <vPortExitCritical+0x42>
 80046ea:	2300      	movs	r3, #0
 80046ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	2000000c 	.word	0x2000000c
	...

08004710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004710:	f3ef 8009 	mrs	r0, PSP
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	4b15      	ldr	r3, [pc, #84]	; (8004770 <pxCurrentTCBConst>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	f01e 0f10 	tst.w	lr, #16
 8004720:	bf08      	it	eq
 8004722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472a:	6010      	str	r0, [r2, #0]
 800472c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004734:	f380 8811 	msr	BASEPRI, r0
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f7ff fca2 	bl	8004088 <vTaskSwitchContext>
 8004744:	f04f 0000 	mov.w	r0, #0
 8004748:	f380 8811 	msr	BASEPRI, r0
 800474c:	bc09      	pop	{r0, r3}
 800474e:	6819      	ldr	r1, [r3, #0]
 8004750:	6808      	ldr	r0, [r1, #0]
 8004752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004756:	f01e 0f10 	tst.w	lr, #16
 800475a:	bf08      	it	eq
 800475c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004760:	f380 8809 	msr	PSP, r0
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	f3af 8000 	nop.w

08004770 <pxCurrentTCBConst>:
 8004770:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop

08004778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	607b      	str	r3, [r7, #4]
}
 8004790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004792:	f7ff fbbb 	bl	8003f0c <xTaskIncrementTick>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <xPortSysTickHandler+0x40>)
 800479e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f383 8811 	msr	BASEPRI, r3
}
 80047ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <vPortSetupTimerInterrupt+0x34>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <vPortSetupTimerInterrupt+0x38>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <vPortSetupTimerInterrupt+0x3c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <vPortSetupTimerInterrupt+0x40>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	099b      	lsrs	r3, r3, #6
 80047d8:	4a09      	ldr	r2, [pc, #36]	; (8004800 <vPortSetupTimerInterrupt+0x44>)
 80047da:	3b01      	subs	r3, #1
 80047dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047de:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <vPortSetupTimerInterrupt+0x34>)
 80047e0:	2207      	movs	r2, #7
 80047e2:	601a      	str	r2, [r3, #0]
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000e010 	.word	0xe000e010
 80047f4:	e000e018 	.word	0xe000e018
 80047f8:	20000000 	.word	0x20000000
 80047fc:	10624dd3 	.word	0x10624dd3
 8004800:	e000e014 	.word	0xe000e014

08004804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004814 <vPortEnableVFP+0x10>
 8004808:	6801      	ldr	r1, [r0, #0]
 800480a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800480e:	6001      	str	r1, [r0, #0]
 8004810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004812:	bf00      	nop
 8004814:	e000ed88 	.word	0xe000ed88

08004818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004824:	f7ff fac8 	bl	8003db8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004828:	4b58      	ldr	r3, [pc, #352]	; (800498c <pvPortMalloc+0x174>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004830:	f000 f910 	bl	8004a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004834:	4b56      	ldr	r3, [pc, #344]	; (8004990 <pvPortMalloc+0x178>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f040 808e 	bne.w	800495e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01d      	beq.n	8004884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004848:	2208      	movs	r2, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	2b00      	cmp	r3, #0
 8004858:	d014      	beq.n	8004884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	3308      	adds	r3, #8
 8004862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <pvPortMalloc+0x6c>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	617b      	str	r3, [r7, #20]
}
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d069      	beq.n	800495e <pvPortMalloc+0x146>
 800488a:	4b42      	ldr	r3, [pc, #264]	; (8004994 <pvPortMalloc+0x17c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d864      	bhi.n	800495e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004894:	4b40      	ldr	r3, [pc, #256]	; (8004998 <pvPortMalloc+0x180>)
 8004896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004898:	4b3f      	ldr	r3, [pc, #252]	; (8004998 <pvPortMalloc+0x180>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800489e:	e004      	b.n	80048aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d903      	bls.n	80048bc <pvPortMalloc+0xa4>
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f1      	bne.n	80048a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048bc:	4b33      	ldr	r3, [pc, #204]	; (800498c <pvPortMalloc+0x174>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d04b      	beq.n	800495e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2208      	movs	r2, #8
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	2308      	movs	r3, #8
 80048e2:	005b      	lsls	r3, r3, #1
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d91f      	bls.n	8004928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <pvPortMalloc+0xf8>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	613b      	str	r3, [r7, #16]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004922:	69b8      	ldr	r0, [r7, #24]
 8004924:	f000 f8f8 	bl	8004b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004928:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <pvPortMalloc+0x17c>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	4a18      	ldr	r2, [pc, #96]	; (8004994 <pvPortMalloc+0x17c>)
 8004934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004936:	4b17      	ldr	r3, [pc, #92]	; (8004994 <pvPortMalloc+0x17c>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b18      	ldr	r3, [pc, #96]	; (800499c <pvPortMalloc+0x184>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d203      	bcs.n	800494a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004942:	4b14      	ldr	r3, [pc, #80]	; (8004994 <pvPortMalloc+0x17c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a15      	ldr	r2, [pc, #84]	; (800499c <pvPortMalloc+0x184>)
 8004948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4b10      	ldr	r3, [pc, #64]	; (8004990 <pvPortMalloc+0x178>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	431a      	orrs	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800495e:	f7ff fa39 	bl	8003dd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <pvPortMalloc+0x16a>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	60fb      	str	r3, [r7, #12]
}
 800497e:	bf00      	nop
 8004980:	e7fe      	b.n	8004980 <pvPortMalloc+0x168>
	return pvReturn;
 8004982:	69fb      	ldr	r3, [r7, #28]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3728      	adds	r7, #40	; 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20001050 	.word	0x20001050
 8004990:	2000105c 	.word	0x2000105c
 8004994:	20001054 	.word	0x20001054
 8004998:	20001048 	.word	0x20001048
 800499c:	20001058 	.word	0x20001058

080049a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d048      	beq.n	8004a44 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049b2:	2308      	movs	r3, #8
 80049b4:	425b      	negs	r3, r3
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4413      	add	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <vPortFree+0xac>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <vPortFree+0x44>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <vPortFree+0x62>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	60bb      	str	r3, [r7, #8]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4b11      	ldr	r3, [pc, #68]	; (8004a4c <vPortFree+0xac>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d019      	beq.n	8004a44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d115      	bne.n	8004a44 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <vPortFree+0xac>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a28:	f7ff f9c6 	bl	8003db8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <vPortFree+0xb0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <vPortFree+0xb0>)
 8004a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a3a:	6938      	ldr	r0, [r7, #16]
 8004a3c:	f000 f86c 	bl	8004b18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004a40:	f7ff f9c8 	bl	8003dd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a44:	bf00      	nop
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	2000105c 	.word	0x2000105c
 8004a50:	20001054 	.word	0x20001054

08004a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <prvHeapInit+0xac>)
 8004a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3307      	adds	r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <prvHeapInit+0xac>)
 8004a84:	4413      	add	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <prvHeapInit+0xb0>)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a92:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <prvHeapInit+0xb0>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <prvHeapInit+0xb4>)
 8004ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <prvHeapInit+0xb4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <prvHeapInit+0xb4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	1ad2      	subs	r2, r2, r3
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <prvHeapInit+0xb4>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <prvHeapInit+0xb8>)
 8004ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <prvHeapInit+0xbc>)
 8004aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <prvHeapInit+0xc0>)
 8004aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004af2:	601a      	str	r2, [r3, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000448 	.word	0x20000448
 8004b04:	20001048 	.word	0x20001048
 8004b08:	20001050 	.word	0x20001050
 8004b0c:	20001058 	.word	0x20001058
 8004b10:	20001054 	.word	0x20001054
 8004b14:	2000105c 	.word	0x2000105c

08004b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b20:	4b28      	ldr	r3, [pc, #160]	; (8004bc4 <prvInsertBlockIntoFreeList+0xac>)
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e002      	b.n	8004b2c <prvInsertBlockIntoFreeList+0x14>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d8f7      	bhi.n	8004b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	4413      	add	r3, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d108      	bne.n	8004b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	441a      	add	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	441a      	add	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d118      	bne.n	8004ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d00d      	beq.n	8004b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	e008      	b.n	8004ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b96:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e003      	b.n	8004ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d002      	beq.n	8004bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20001048 	.word	0x20001048
 8004bc8:	20001050 	.word	0x20001050

08004bcc <memset>:
 8004bcc:	4402      	add	r2, r0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d100      	bne.n	8004bd6 <memset+0xa>
 8004bd4:	4770      	bx	lr
 8004bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bda:	e7f9      	b.n	8004bd0 <memset+0x4>

08004bdc <__libc_init_array>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	4d0d      	ldr	r5, [pc, #52]	; (8004c14 <__libc_init_array+0x38>)
 8004be0:	4c0d      	ldr	r4, [pc, #52]	; (8004c18 <__libc_init_array+0x3c>)
 8004be2:	1b64      	subs	r4, r4, r5
 8004be4:	10a4      	asrs	r4, r4, #2
 8004be6:	2600      	movs	r6, #0
 8004be8:	42a6      	cmp	r6, r4
 8004bea:	d109      	bne.n	8004c00 <__libc_init_array+0x24>
 8004bec:	4d0b      	ldr	r5, [pc, #44]	; (8004c1c <__libc_init_array+0x40>)
 8004bee:	4c0c      	ldr	r4, [pc, #48]	; (8004c20 <__libc_init_array+0x44>)
 8004bf0:	f000 f818 	bl	8004c24 <_init>
 8004bf4:	1b64      	subs	r4, r4, r5
 8004bf6:	10a4      	asrs	r4, r4, #2
 8004bf8:	2600      	movs	r6, #0
 8004bfa:	42a6      	cmp	r6, r4
 8004bfc:	d105      	bne.n	8004c0a <__libc_init_array+0x2e>
 8004bfe:	bd70      	pop	{r4, r5, r6, pc}
 8004c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c04:	4798      	blx	r3
 8004c06:	3601      	adds	r6, #1
 8004c08:	e7ee      	b.n	8004be8 <__libc_init_array+0xc>
 8004c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c0e:	4798      	blx	r3
 8004c10:	3601      	adds	r6, #1
 8004c12:	e7f2      	b.n	8004bfa <__libc_init_array+0x1e>
 8004c14:	08004cd0 	.word	0x08004cd0
 8004c18:	08004cd0 	.word	0x08004cd0
 8004c1c:	08004cd0 	.word	0x08004cd0
 8004c20:	08004cd4 	.word	0x08004cd4

08004c24 <_init>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr

08004c30 <_fini>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	bf00      	nop
 8004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c36:	bc08      	pop	{r3}
 8004c38:	469e      	mov	lr, r3
 8004c3a:	4770      	bx	lr
